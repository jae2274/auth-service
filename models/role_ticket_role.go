// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoleTicketRole is an object representing the database table.
type RoleTicketRole struct {
	RoleTicketID int       `boil:"role_ticket_id" json:"role_ticket_id" toml:"role_ticket_id" yaml:"role_ticket_id"`
	RoleName     string    `boil:"role_name" json:"role_name" toml:"role_name" yaml:"role_name"`
	ExpiryTerm   null.Time `boil:"expiry_term" json:"expiry_term,omitempty" toml:"expiry_term" yaml:"expiry_term,omitempty"`

	R *roleTicketRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleTicketRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleTicketRoleColumns = struct {
	RoleTicketID string
	RoleName     string
	ExpiryTerm   string
}{
	RoleTicketID: "role_ticket_id",
	RoleName:     "role_name",
	ExpiryTerm:   "expiry_term",
}

var RoleTicketRoleTableColumns = struct {
	RoleTicketID string
	RoleName     string
	ExpiryTerm   string
}{
	RoleTicketID: "role_ticket_role.role_ticket_id",
	RoleName:     "role_ticket_role.role_name",
	ExpiryTerm:   "role_ticket_role.expiry_term",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RoleTicketRoleWhere = struct {
	RoleTicketID whereHelperint
	RoleName     whereHelperstring
	ExpiryTerm   whereHelpernull_Time
}{
	RoleTicketID: whereHelperint{field: "`role_ticket_role`.`role_ticket_id`"},
	RoleName:     whereHelperstring{field: "`role_ticket_role`.`role_name`"},
	ExpiryTerm:   whereHelpernull_Time{field: "`role_ticket_role`.`expiry_term`"},
}

// RoleTicketRoleRels is where relationship names are stored.
var RoleTicketRoleRels = struct {
	RoleTicket string
}{
	RoleTicket: "RoleTicket",
}

// roleTicketRoleR is where relationships are stored.
type roleTicketRoleR struct {
	RoleTicket *RoleTicket `boil:"RoleTicket" json:"RoleTicket" toml:"RoleTicket" yaml:"RoleTicket"`
}

// NewStruct creates a new relationship struct
func (*roleTicketRoleR) NewStruct() *roleTicketRoleR {
	return &roleTicketRoleR{}
}

func (r *roleTicketRoleR) GetRoleTicket() *RoleTicket {
	if r == nil {
		return nil
	}
	return r.RoleTicket
}

// roleTicketRoleL is where Load methods for each relationship are stored.
type roleTicketRoleL struct{}

var (
	roleTicketRoleAllColumns            = []string{"role_ticket_id", "role_name", "expiry_term"}
	roleTicketRoleColumnsWithoutDefault = []string{"role_ticket_id", "role_name", "expiry_term"}
	roleTicketRoleColumnsWithDefault    = []string{}
	roleTicketRolePrimaryKeyColumns     = []string{"role_ticket_id"}
	roleTicketRoleGeneratedColumns      = []string{}
)

type (
	// RoleTicketRoleSlice is an alias for a slice of pointers to RoleTicketRole.
	// This should almost always be used instead of []RoleTicketRole.
	RoleTicketRoleSlice []*RoleTicketRole
	// RoleTicketRoleHook is the signature for custom RoleTicketRole hook methods
	RoleTicketRoleHook func(context.Context, boil.ContextExecutor, *RoleTicketRole) error

	roleTicketRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleTicketRoleType                 = reflect.TypeOf(&RoleTicketRole{})
	roleTicketRoleMapping              = queries.MakeStructMapping(roleTicketRoleType)
	roleTicketRolePrimaryKeyMapping, _ = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, roleTicketRolePrimaryKeyColumns)
	roleTicketRoleInsertCacheMut       sync.RWMutex
	roleTicketRoleInsertCache          = make(map[string]insertCache)
	roleTicketRoleUpdateCacheMut       sync.RWMutex
	roleTicketRoleUpdateCache          = make(map[string]updateCache)
	roleTicketRoleUpsertCacheMut       sync.RWMutex
	roleTicketRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleTicketRoleAfterSelectMu sync.Mutex
var roleTicketRoleAfterSelectHooks []RoleTicketRoleHook

var roleTicketRoleBeforeInsertMu sync.Mutex
var roleTicketRoleBeforeInsertHooks []RoleTicketRoleHook
var roleTicketRoleAfterInsertMu sync.Mutex
var roleTicketRoleAfterInsertHooks []RoleTicketRoleHook

var roleTicketRoleBeforeUpdateMu sync.Mutex
var roleTicketRoleBeforeUpdateHooks []RoleTicketRoleHook
var roleTicketRoleAfterUpdateMu sync.Mutex
var roleTicketRoleAfterUpdateHooks []RoleTicketRoleHook

var roleTicketRoleBeforeDeleteMu sync.Mutex
var roleTicketRoleBeforeDeleteHooks []RoleTicketRoleHook
var roleTicketRoleAfterDeleteMu sync.Mutex
var roleTicketRoleAfterDeleteHooks []RoleTicketRoleHook

var roleTicketRoleBeforeUpsertMu sync.Mutex
var roleTicketRoleBeforeUpsertHooks []RoleTicketRoleHook
var roleTicketRoleAfterUpsertMu sync.Mutex
var roleTicketRoleAfterUpsertHooks []RoleTicketRoleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleTicketRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleTicketRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleTicketRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleTicketRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleTicketRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleTicketRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleTicketRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleTicketRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleTicketRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleTicketRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleTicketRoleHook registers your hook function for all future operations.
func AddRoleTicketRoleHook(hookPoint boil.HookPoint, roleTicketRoleHook RoleTicketRoleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roleTicketRoleAfterSelectMu.Lock()
		roleTicketRoleAfterSelectHooks = append(roleTicketRoleAfterSelectHooks, roleTicketRoleHook)
		roleTicketRoleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roleTicketRoleBeforeInsertMu.Lock()
		roleTicketRoleBeforeInsertHooks = append(roleTicketRoleBeforeInsertHooks, roleTicketRoleHook)
		roleTicketRoleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roleTicketRoleAfterInsertMu.Lock()
		roleTicketRoleAfterInsertHooks = append(roleTicketRoleAfterInsertHooks, roleTicketRoleHook)
		roleTicketRoleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roleTicketRoleBeforeUpdateMu.Lock()
		roleTicketRoleBeforeUpdateHooks = append(roleTicketRoleBeforeUpdateHooks, roleTicketRoleHook)
		roleTicketRoleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roleTicketRoleAfterUpdateMu.Lock()
		roleTicketRoleAfterUpdateHooks = append(roleTicketRoleAfterUpdateHooks, roleTicketRoleHook)
		roleTicketRoleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roleTicketRoleBeforeDeleteMu.Lock()
		roleTicketRoleBeforeDeleteHooks = append(roleTicketRoleBeforeDeleteHooks, roleTicketRoleHook)
		roleTicketRoleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roleTicketRoleAfterDeleteMu.Lock()
		roleTicketRoleAfterDeleteHooks = append(roleTicketRoleAfterDeleteHooks, roleTicketRoleHook)
		roleTicketRoleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roleTicketRoleBeforeUpsertMu.Lock()
		roleTicketRoleBeforeUpsertHooks = append(roleTicketRoleBeforeUpsertHooks, roleTicketRoleHook)
		roleTicketRoleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roleTicketRoleAfterUpsertMu.Lock()
		roleTicketRoleAfterUpsertHooks = append(roleTicketRoleAfterUpsertHooks, roleTicketRoleHook)
		roleTicketRoleAfterUpsertMu.Unlock()
	}
}

// One returns a single roleTicketRole record from the query.
func (q roleTicketRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleTicketRole, error) {
	o := &RoleTicketRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_ticket_role")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleTicketRole records from the query.
func (q roleTicketRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleTicketRoleSlice, error) {
	var o []*RoleTicketRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleTicketRole slice")
	}

	if len(roleTicketRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleTicketRole records in the query.
func (q roleTicketRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_ticket_role rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleTicketRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_ticket_role exists")
	}

	return count > 0, nil
}

// RoleTicket pointed to by the foreign key.
func (o *RoleTicketRole) RoleTicket(mods ...qm.QueryMod) roleTicketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`role_ticket_id` = ?", o.RoleTicketID),
	}

	queryMods = append(queryMods, mods...)

	return RoleTickets(queryMods...)
}

// LoadRoleTicket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleTicketRoleL) LoadRoleTicket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleTicketRole interface{}, mods queries.Applicator) error {
	var slice []*RoleTicketRole
	var object *RoleTicketRole

	if singular {
		var ok bool
		object, ok = maybeRoleTicketRole.(*RoleTicketRole)
		if !ok {
			object = new(RoleTicketRole)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleTicketRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleTicketRole))
			}
		}
	} else {
		s, ok := maybeRoleTicketRole.(*[]*RoleTicketRole)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleTicketRole)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleTicketRole))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleTicketRoleR{}
		}
		args[object.RoleTicketID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleTicketRoleR{}
			}

			args[obj.RoleTicketID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`role_ticket`),
		qm.WhereIn(`role_ticket.role_ticket_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoleTicket")
	}

	var resultSlice []*RoleTicket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoleTicket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for role_ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_ticket")
	}

	if len(roleTicketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoleTicket = foreign
		if foreign.R == nil {
			foreign.R = &roleTicketR{}
		}
		foreign.R.RoleTicketRole = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleTicketID == foreign.RoleTicketID {
				local.R.RoleTicket = foreign
				if foreign.R == nil {
					foreign.R = &roleTicketR{}
				}
				foreign.R.RoleTicketRole = local
				break
			}
		}
	}

	return nil
}

// SetRoleTicket of the roleTicketRole to the related item.
// Sets o.R.RoleTicket to related.
// Adds o to related.R.RoleTicketRole.
func (o *RoleTicketRole) SetRoleTicket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RoleTicket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `role_ticket_role` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"role_ticket_id"}),
		strmangle.WhereClause("`", "`", 0, roleTicketRolePrimaryKeyColumns),
	)
	values := []interface{}{related.RoleTicketID, o.RoleTicketID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleTicketID = related.RoleTicketID
	if o.R == nil {
		o.R = &roleTicketRoleR{
			RoleTicket: related,
		}
	} else {
		o.R.RoleTicket = related
	}

	if related.R == nil {
		related.R = &roleTicketR{
			RoleTicketRole: o,
		}
	} else {
		related.R.RoleTicketRole = o
	}

	return nil
}

// RoleTicketRoles retrieves all the records using an executor.
func RoleTicketRoles(mods ...qm.QueryMod) roleTicketRoleQuery {
	mods = append(mods, qm.From("`role_ticket_role`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`role_ticket_role`.*"})
	}

	return roleTicketRoleQuery{q}
}

// FindRoleTicketRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleTicketRole(ctx context.Context, exec boil.ContextExecutor, roleTicketID int, selectCols ...string) (*RoleTicketRole, error) {
	roleTicketRoleObj := &RoleTicketRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `role_ticket_role` where `role_ticket_id`=?", sel,
	)

	q := queries.Raw(query, roleTicketID)

	err := q.Bind(ctx, exec, roleTicketRoleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_ticket_role")
	}

	if err = roleTicketRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roleTicketRoleObj, err
	}

	return roleTicketRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleTicketRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_ticket_role provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleTicketRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleTicketRoleInsertCacheMut.RLock()
	cache, cached := roleTicketRoleInsertCache[key]
	roleTicketRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleTicketRoleAllColumns,
			roleTicketRoleColumnsWithDefault,
			roleTicketRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `role_ticket_role` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `role_ticket_role` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `role_ticket_role` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, roleTicketRolePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_ticket_role")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.RoleTicketID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for role_ticket_role")
	}

CacheNoHooks:
	if !cached {
		roleTicketRoleInsertCacheMut.Lock()
		roleTicketRoleInsertCache[key] = cache
		roleTicketRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleTicketRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleTicketRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleTicketRoleUpdateCacheMut.RLock()
	cache, cached := roleTicketRoleUpdateCache[key]
	roleTicketRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleTicketRoleAllColumns,
			roleTicketRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_ticket_role, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `role_ticket_role` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, roleTicketRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, append(wl, roleTicketRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_ticket_role row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_ticket_role")
	}

	if !cached {
		roleTicketRoleUpdateCacheMut.Lock()
		roleTicketRoleUpdateCache[key] = cache
		roleTicketRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleTicketRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_ticket_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_ticket_role")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleTicketRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleTicketRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `role_ticket_role` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleTicketRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleTicketRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleTicketRole")
	}
	return rowsAff, nil
}

var mySQLRoleTicketRoleUniqueColumns = []string{
	"role_ticket_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleTicketRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_ticket_role provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleTicketRoleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRoleTicketRoleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleTicketRoleUpsertCacheMut.RLock()
	cache, cached := roleTicketRoleUpsertCache[key]
	roleTicketRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roleTicketRoleAllColumns,
			roleTicketRoleColumnsWithDefault,
			roleTicketRoleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roleTicketRoleAllColumns,
			roleTicketRolePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert role_ticket_role, could not build update column list")
		}

		ret := strmangle.SetComplement(roleTicketRoleAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`role_ticket_role`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `role_ticket_role` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for role_ticket_role")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(roleTicketRoleType, roleTicketRoleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for role_ticket_role")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for role_ticket_role")
	}

CacheNoHooks:
	if !cached {
		roleTicketRoleUpsertCacheMut.Lock()
		roleTicketRoleUpsertCache[key] = cache
		roleTicketRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoleTicketRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleTicketRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleTicketRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleTicketRolePrimaryKeyMapping)
	sql := "DELETE FROM `role_ticket_role` WHERE `role_ticket_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_ticket_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_ticket_role")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleTicketRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleTicketRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_ticket_role")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_ticket_role")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleTicketRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleTicketRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleTicketRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `role_ticket_role` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleTicketRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleTicketRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_ticket_role")
	}

	if len(roleTicketRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleTicketRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleTicketRole(ctx, exec, o.RoleTicketID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleTicketRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleTicketRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleTicketRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `role_ticket_role`.* FROM `role_ticket_role` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleTicketRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleTicketRoleSlice")
	}

	*o = slice

	return nil
}

// RoleTicketRoleExists checks if the RoleTicketRole row exists.
func RoleTicketRoleExists(ctx context.Context, exec boil.ContextExecutor, roleTicketID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `role_ticket_role` where `role_ticket_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, roleTicketID)
	}
	row := exec.QueryRowContext(ctx, sql, roleTicketID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_ticket_role exists")
	}

	return exists, nil
}

// Exists checks if the RoleTicketRole row exists.
func (o *RoleTicketRole) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoleTicketRoleExists(ctx, exec, o.RoleTicketID)
}
