// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleTicketRoles(t *testing.T) {
	t.Parallel()

	query := RoleTicketRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleTicketRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTicketRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleTicketRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTicketRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleTicketRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTicketRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleTicketRoleExists(ctx, tx, o.RoleTicketID)
	if err != nil {
		t.Errorf("Unable to check if RoleTicketRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleTicketRoleExists to return true, but got false.")
	}
}

func testRoleTicketRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleTicketRoleFound, err := FindRoleTicketRole(ctx, tx, o.RoleTicketID)
	if err != nil {
		t.Error(err)
	}

	if roleTicketRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleTicketRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleTicketRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleTicketRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleTicketRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleTicketRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleTicketRoleOne := &RoleTicketRole{}
	roleTicketRoleTwo := &RoleTicketRole{}
	if err = randomize.Struct(seed, roleTicketRoleOne, roleTicketRoleDBTypes, false, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}
	if err = randomize.Struct(seed, roleTicketRoleTwo, roleTicketRoleDBTypes, false, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleTicketRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleTicketRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleTicketRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleTicketRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleTicketRoleOne := &RoleTicketRole{}
	roleTicketRoleTwo := &RoleTicketRole{}
	if err = randomize.Struct(seed, roleTicketRoleOne, roleTicketRoleDBTypes, false, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}
	if err = randomize.Struct(seed, roleTicketRoleTwo, roleTicketRoleDBTypes, false, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleTicketRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleTicketRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roleTicketRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func roleTicketRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
	*o = RoleTicketRole{}
	return nil
}

func testRoleTicketRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoleTicketRole{}
	o := &RoleTicketRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole object: %s", err)
	}

	AddRoleTicketRoleHook(boil.BeforeInsertHook, roleTicketRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleBeforeInsertHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.AfterInsertHook, roleTicketRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleAfterInsertHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.AfterSelectHook, roleTicketRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleAfterSelectHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.BeforeUpdateHook, roleTicketRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleBeforeUpdateHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.AfterUpdateHook, roleTicketRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleAfterUpdateHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.BeforeDeleteHook, roleTicketRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleBeforeDeleteHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.AfterDeleteHook, roleTicketRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleAfterDeleteHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.BeforeUpsertHook, roleTicketRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleBeforeUpsertHooks = []RoleTicketRoleHook{}

	AddRoleTicketRoleHook(boil.AfterUpsertHook, roleTicketRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roleTicketRoleAfterUpsertHooks = []RoleTicketRoleHook{}
}

func testRoleTicketRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleTicketRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleTicketRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleTicketRoleToOneRoleTicketUsingRoleTicket(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleTicketRole
	var foreign RoleTicket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleTicketRoleDBTypes, false, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleTicketDBTypes, false, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleTicketID = foreign.RoleTicketID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoleTicket().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.RoleTicketID != foreign.RoleTicketID {
		t.Errorf("want: %v, got %v", foreign.RoleTicketID, check.RoleTicketID)
	}

	ranAfterSelectHook := false
	AddRoleTicketHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RoleTicketRoleSlice{&local}
	if err = local.L.LoadRoleTicket(ctx, tx, false, (*[]*RoleTicketRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleTicket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoleTicket = nil
	if err = local.L.LoadRoleTicket(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleTicket == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRoleTicketRoleToOneSetOpRoleTicketUsingRoleTicket(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleTicketRole
	var b, c RoleTicket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleTicketRoleDBTypes, false, strmangle.SetComplement(roleTicketRolePrimaryKeyColumns, roleTicketRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleTicketDBTypes, false, strmangle.SetComplement(roleTicketPrimaryKeyColumns, roleTicketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleTicketDBTypes, false, strmangle.SetComplement(roleTicketPrimaryKeyColumns, roleTicketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleTicket{&b, &c} {
		err = a.SetRoleTicket(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoleTicket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleTicketRole != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleTicketID != x.RoleTicketID {
			t.Error("foreign key was wrong value", a.RoleTicketID)
		}

		if exists, err := RoleTicketRoleExists(ctx, tx, a.RoleTicketID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testRoleTicketRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleTicketRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleTicketRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleTicketRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleTicketRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleTicketRoleDBTypes = map[string]string{`RoleTicketID`: `int`, `RoleName`: `varchar`, `ExpiryTerm`: `timestamp`}
	_                     = bytes.MinRead
)

func testRoleTicketRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleTicketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleTicketRoleAllColumns) == len(roleTicketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleTicketRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleTicketRoleAllColumns) == len(roleTicketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicketRole{}
	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleTicketRoleDBTypes, true, roleTicketRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleTicketRoleAllColumns, roleTicketRolePrimaryKeyColumns) {
		fields = roleTicketRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			roleTicketRoleAllColumns,
			roleTicketRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleTicketRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleTicketRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(roleTicketRoleAllColumns) == len(roleTicketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRoleTicketRoleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleTicketRole{}
	if err = randomize.Struct(seed, &o, roleTicketRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleTicketRole: %s", err)
	}

	count, err := RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleTicketRoleDBTypes, false, roleTicketRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleTicketRole: %s", err)
	}

	count, err = RoleTicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
