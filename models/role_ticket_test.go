// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleTickets(t *testing.T) {
	t.Parallel()

	query := RoleTickets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleTicketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTicketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleTickets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTicketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleTicketSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleTicketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleTicketExists(ctx, tx, o.RoleTicketID)
	if err != nil {
		t.Errorf("Unable to check if RoleTicket exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleTicketExists to return true, but got false.")
	}
}

func testRoleTicketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleTicketFound, err := FindRoleTicket(ctx, tx, o.RoleTicketID)
	if err != nil {
		t.Error(err)
	}

	if roleTicketFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleTicketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleTickets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleTicketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleTickets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleTicketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleTicketOne := &RoleTicket{}
	roleTicketTwo := &RoleTicket{}
	if err = randomize.Struct(seed, roleTicketOne, roleTicketDBTypes, false, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}
	if err = randomize.Struct(seed, roleTicketTwo, roleTicketDBTypes, false, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleTicketOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleTicketTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleTickets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleTicketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleTicketOne := &RoleTicket{}
	roleTicketTwo := &RoleTicket{}
	if err = randomize.Struct(seed, roleTicketOne, roleTicketDBTypes, false, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}
	if err = randomize.Struct(seed, roleTicketTwo, roleTicketDBTypes, false, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleTicketOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleTicketTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roleTicketBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func roleTicketAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleTicket) error {
	*o = RoleTicket{}
	return nil
}

func testRoleTicketsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoleTicket{}
	o := &RoleTicket{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roleTicketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleTicket object: %s", err)
	}

	AddRoleTicketHook(boil.BeforeInsertHook, roleTicketBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roleTicketBeforeInsertHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.AfterInsertHook, roleTicketAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roleTicketAfterInsertHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.AfterSelectHook, roleTicketAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roleTicketAfterSelectHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.BeforeUpdateHook, roleTicketBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roleTicketBeforeUpdateHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.AfterUpdateHook, roleTicketAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roleTicketAfterUpdateHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.BeforeDeleteHook, roleTicketBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roleTicketBeforeDeleteHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.AfterDeleteHook, roleTicketAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roleTicketAfterDeleteHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.BeforeUpsertHook, roleTicketBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roleTicketBeforeUpsertHooks = []RoleTicketHook{}

	AddRoleTicketHook(boil.AfterUpsertHook, roleTicketAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roleTicketAfterUpsertHooks = []RoleTicketHook{}
}

func testRoleTicketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleTicketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleTicketColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleTicketOneToOneRoleTicketRoleUsingRoleTicketRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RoleTicketRole
	var local RoleTicket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, roleTicketRoleDBTypes, true, roleTicketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicketRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.RoleTicketID = local.RoleTicketID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RoleTicketRole().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.RoleTicketID != foreign.RoleTicketID {
		t.Errorf("want: %v, got %v", foreign.RoleTicketID, check.RoleTicketID)
	}

	ranAfterSelectHook := false
	AddRoleTicketRoleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *RoleTicketRole) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RoleTicketSlice{&local}
	if err = local.L.LoadRoleTicketRole(ctx, tx, false, (*[]*RoleTicket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleTicketRole == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RoleTicketRole = nil
	if err = local.L.LoadRoleTicketRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RoleTicketRole == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRoleTicketOneToOneSetOpRoleTicketRoleUsingRoleTicketRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleTicket
	var b, c RoleTicketRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleTicketDBTypes, false, strmangle.SetComplement(roleTicketPrimaryKeyColumns, roleTicketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleTicketRoleDBTypes, false, strmangle.SetComplement(roleTicketRolePrimaryKeyColumns, roleTicketRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleTicketRoleDBTypes, false, strmangle.SetComplement(roleTicketRolePrimaryKeyColumns, roleTicketRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RoleTicketRole{&b, &c} {
		err = a.SetRoleTicketRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RoleTicketRole != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.RoleTicket != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.RoleTicketID != x.RoleTicketID {
			t.Error("foreign key was wrong value", a.RoleTicketID)
		}

		if exists, err := RoleTicketRoleExists(ctx, tx, x.RoleTicketID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.RoleTicketID != x.RoleTicketID {
			t.Error("foreign key was wrong value", a.RoleTicketID, x.RoleTicketID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testRoleTicketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleTicketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleTicketSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleTicketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleTickets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleTicketDBTypes = map[string]string{`RoleTicketID`: `int`, `UUID`: `varchar`, `UsedBy`: `int`, `CreateDate`: `datetime`}
	_                 = bytes.MinRead
)

func testRoleTicketsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleTicketPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleTicketAllColumns) == len(roleTicketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleTicketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleTicketAllColumns) == len(roleTicketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleTicket{}
	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleTicketDBTypes, true, roleTicketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleTicketAllColumns, roleTicketPrimaryKeyColumns) {
		fields = roleTicketAllColumns
	} else {
		fields = strmangle.SetComplement(
			roleTicketAllColumns,
			roleTicketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleTicketSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleTicketsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleTicketAllColumns) == len(roleTicketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRoleTicketUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleTicket{}
	if err = randomize.Struct(seed, &o, roleTicketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleTicket: %s", err)
	}

	count, err := RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleTicketDBTypes, false, roleTicketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleTicket struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleTicket: %s", err)
	}

	count, err = RoleTickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
