// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("RoleTickets", testRoleTickets)
	t.Run("RoleTicketRoles", testRoleTicketRoles)
	t.Run("Users", testUsers)
	t.Run("UserRoles", testUserRoles)
}

func TestDelete(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsDelete)
	t.Run("RoleTicketRoles", testRoleTicketRolesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserRoles", testUserRolesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsQueryDeleteAll)
	t.Run("RoleTicketRoles", testRoleTicketRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserRoles", testUserRolesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsSliceDeleteAll)
	t.Run("RoleTicketRoles", testRoleTicketRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserRoles", testUserRolesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsExists)
	t.Run("RoleTicketRoles", testRoleTicketRolesExists)
	t.Run("Users", testUsersExists)
	t.Run("UserRoles", testUserRolesExists)
}

func TestFind(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsFind)
	t.Run("RoleTicketRoles", testRoleTicketRolesFind)
	t.Run("Users", testUsersFind)
	t.Run("UserRoles", testUserRolesFind)
}

func TestBind(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsBind)
	t.Run("RoleTicketRoles", testRoleTicketRolesBind)
	t.Run("Users", testUsersBind)
	t.Run("UserRoles", testUserRolesBind)
}

func TestOne(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsOne)
	t.Run("RoleTicketRoles", testRoleTicketRolesOne)
	t.Run("Users", testUsersOne)
	t.Run("UserRoles", testUserRolesOne)
}

func TestAll(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsAll)
	t.Run("RoleTicketRoles", testRoleTicketRolesAll)
	t.Run("Users", testUsersAll)
	t.Run("UserRoles", testUserRolesAll)
}

func TestCount(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsCount)
	t.Run("RoleTicketRoles", testRoleTicketRolesCount)
	t.Run("Users", testUsersCount)
	t.Run("UserRoles", testUserRolesCount)
}

func TestHooks(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsHooks)
	t.Run("RoleTicketRoles", testRoleTicketRolesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserRoles", testUserRolesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsInsert)
	t.Run("RoleTickets", testRoleTicketsInsertWhitelist)
	t.Run("RoleTicketRoles", testRoleTicketRolesInsert)
	t.Run("RoleTicketRoles", testRoleTicketRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserRoles", testUserRolesInsert)
	t.Run("UserRoles", testUserRolesInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsReload)
	t.Run("RoleTicketRoles", testRoleTicketRolesReload)
	t.Run("Users", testUsersReload)
	t.Run("UserRoles", testUserRolesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsReloadAll)
	t.Run("RoleTicketRoles", testRoleTicketRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserRoles", testUserRolesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsSelect)
	t.Run("RoleTicketRoles", testRoleTicketRolesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserRoles", testUserRolesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsUpdate)
	t.Run("RoleTicketRoles", testRoleTicketRolesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserRoles", testUserRolesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("RoleTickets", testRoleTicketsSliceUpdateAll)
	t.Run("RoleTicketRoles", testRoleTicketRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserRoles", testUserRolesSliceUpdateAll)
}
