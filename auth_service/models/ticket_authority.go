// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TicketAuthority is an object representing the database table.
type TicketAuthority struct {
	TicketID       int       `boil:"ticket_id" json:"ticket_id" toml:"ticket_id" yaml:"ticket_id"`
	AuthorityID    int       `boil:"authority_id" json:"authority_id" toml:"authority_id" yaml:"authority_id"`
	ExpiryDuration null.Time `boil:"expiry_duration" json:"expiry_duration,omitempty" toml:"expiry_duration" yaml:"expiry_duration,omitempty"`

	R *ticketAuthorityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ticketAuthorityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TicketAuthorityColumns = struct {
	TicketID       string
	AuthorityID    string
	ExpiryDuration string
}{
	TicketID:       "ticket_id",
	AuthorityID:    "authority_id",
	ExpiryDuration: "expiry_duration",
}

var TicketAuthorityTableColumns = struct {
	TicketID       string
	AuthorityID    string
	ExpiryDuration string
}{
	TicketID:       "ticket_authority.ticket_id",
	AuthorityID:    "ticket_authority.authority_id",
	ExpiryDuration: "ticket_authority.expiry_duration",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TicketAuthorityWhere = struct {
	TicketID       whereHelperint
	AuthorityID    whereHelperint
	ExpiryDuration whereHelpernull_Time
}{
	TicketID:       whereHelperint{field: "`ticket_authority`.`ticket_id`"},
	AuthorityID:    whereHelperint{field: "`ticket_authority`.`authority_id`"},
	ExpiryDuration: whereHelpernull_Time{field: "`ticket_authority`.`expiry_duration`"},
}

// TicketAuthorityRels is where relationship names are stored.
var TicketAuthorityRels = struct {
	Authority string
	Ticket    string
}{
	Authority: "Authority",
	Ticket:    "Ticket",
}

// ticketAuthorityR is where relationships are stored.
type ticketAuthorityR struct {
	Authority *Authority `boil:"Authority" json:"Authority" toml:"Authority" yaml:"Authority"`
	Ticket    *Ticket    `boil:"Ticket" json:"Ticket" toml:"Ticket" yaml:"Ticket"`
}

// NewStruct creates a new relationship struct
func (*ticketAuthorityR) NewStruct() *ticketAuthorityR {
	return &ticketAuthorityR{}
}

func (r *ticketAuthorityR) GetAuthority() *Authority {
	if r == nil {
		return nil
	}
	return r.Authority
}

func (r *ticketAuthorityR) GetTicket() *Ticket {
	if r == nil {
		return nil
	}
	return r.Ticket
}

// ticketAuthorityL is where Load methods for each relationship are stored.
type ticketAuthorityL struct{}

var (
	ticketAuthorityAllColumns            = []string{"ticket_id", "authority_id", "expiry_duration"}
	ticketAuthorityColumnsWithoutDefault = []string{"ticket_id", "authority_id", "expiry_duration"}
	ticketAuthorityColumnsWithDefault    = []string{}
	ticketAuthorityPrimaryKeyColumns     = []string{"ticket_id", "authority_id"}
	ticketAuthorityGeneratedColumns      = []string{}
)

type (
	// TicketAuthoritySlice is an alias for a slice of pointers to TicketAuthority.
	// This should almost always be used instead of []TicketAuthority.
	TicketAuthoritySlice []*TicketAuthority
	// TicketAuthorityHook is the signature for custom TicketAuthority hook methods
	TicketAuthorityHook func(context.Context, boil.ContextExecutor, *TicketAuthority) error

	ticketAuthorityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ticketAuthorityType                 = reflect.TypeOf(&TicketAuthority{})
	ticketAuthorityMapping              = queries.MakeStructMapping(ticketAuthorityType)
	ticketAuthorityPrimaryKeyMapping, _ = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, ticketAuthorityPrimaryKeyColumns)
	ticketAuthorityInsertCacheMut       sync.RWMutex
	ticketAuthorityInsertCache          = make(map[string]insertCache)
	ticketAuthorityUpdateCacheMut       sync.RWMutex
	ticketAuthorityUpdateCache          = make(map[string]updateCache)
	ticketAuthorityUpsertCacheMut       sync.RWMutex
	ticketAuthorityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ticketAuthorityAfterSelectMu sync.Mutex
var ticketAuthorityAfterSelectHooks []TicketAuthorityHook

var ticketAuthorityBeforeInsertMu sync.Mutex
var ticketAuthorityBeforeInsertHooks []TicketAuthorityHook
var ticketAuthorityAfterInsertMu sync.Mutex
var ticketAuthorityAfterInsertHooks []TicketAuthorityHook

var ticketAuthorityBeforeUpdateMu sync.Mutex
var ticketAuthorityBeforeUpdateHooks []TicketAuthorityHook
var ticketAuthorityAfterUpdateMu sync.Mutex
var ticketAuthorityAfterUpdateHooks []TicketAuthorityHook

var ticketAuthorityBeforeDeleteMu sync.Mutex
var ticketAuthorityBeforeDeleteHooks []TicketAuthorityHook
var ticketAuthorityAfterDeleteMu sync.Mutex
var ticketAuthorityAfterDeleteHooks []TicketAuthorityHook

var ticketAuthorityBeforeUpsertMu sync.Mutex
var ticketAuthorityBeforeUpsertHooks []TicketAuthorityHook
var ticketAuthorityAfterUpsertMu sync.Mutex
var ticketAuthorityAfterUpsertHooks []TicketAuthorityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TicketAuthority) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TicketAuthority) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TicketAuthority) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TicketAuthority) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TicketAuthority) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TicketAuthority) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TicketAuthority) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TicketAuthority) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TicketAuthority) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketAuthorityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTicketAuthorityHook registers your hook function for all future operations.
func AddTicketAuthorityHook(hookPoint boil.HookPoint, ticketAuthorityHook TicketAuthorityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ticketAuthorityAfterSelectMu.Lock()
		ticketAuthorityAfterSelectHooks = append(ticketAuthorityAfterSelectHooks, ticketAuthorityHook)
		ticketAuthorityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ticketAuthorityBeforeInsertMu.Lock()
		ticketAuthorityBeforeInsertHooks = append(ticketAuthorityBeforeInsertHooks, ticketAuthorityHook)
		ticketAuthorityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ticketAuthorityAfterInsertMu.Lock()
		ticketAuthorityAfterInsertHooks = append(ticketAuthorityAfterInsertHooks, ticketAuthorityHook)
		ticketAuthorityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ticketAuthorityBeforeUpdateMu.Lock()
		ticketAuthorityBeforeUpdateHooks = append(ticketAuthorityBeforeUpdateHooks, ticketAuthorityHook)
		ticketAuthorityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ticketAuthorityAfterUpdateMu.Lock()
		ticketAuthorityAfterUpdateHooks = append(ticketAuthorityAfterUpdateHooks, ticketAuthorityHook)
		ticketAuthorityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ticketAuthorityBeforeDeleteMu.Lock()
		ticketAuthorityBeforeDeleteHooks = append(ticketAuthorityBeforeDeleteHooks, ticketAuthorityHook)
		ticketAuthorityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ticketAuthorityAfterDeleteMu.Lock()
		ticketAuthorityAfterDeleteHooks = append(ticketAuthorityAfterDeleteHooks, ticketAuthorityHook)
		ticketAuthorityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ticketAuthorityBeforeUpsertMu.Lock()
		ticketAuthorityBeforeUpsertHooks = append(ticketAuthorityBeforeUpsertHooks, ticketAuthorityHook)
		ticketAuthorityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ticketAuthorityAfterUpsertMu.Lock()
		ticketAuthorityAfterUpsertHooks = append(ticketAuthorityAfterUpsertHooks, ticketAuthorityHook)
		ticketAuthorityAfterUpsertMu.Unlock()
	}
}

// One returns a single ticketAuthority record from the query.
func (q ticketAuthorityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TicketAuthority, error) {
	o := &TicketAuthority{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ticket_authority")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TicketAuthority records from the query.
func (q ticketAuthorityQuery) All(ctx context.Context, exec boil.ContextExecutor) (TicketAuthoritySlice, error) {
	var o []*TicketAuthority

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TicketAuthority slice")
	}

	if len(ticketAuthorityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TicketAuthority records in the query.
func (q ticketAuthorityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ticket_authority rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ticketAuthorityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ticket_authority exists")
	}

	return count > 0, nil
}

// Authority pointed to by the foreign key.
func (o *TicketAuthority) Authority(mods ...qm.QueryMod) authorityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`authority_id` = ?", o.AuthorityID),
	}

	queryMods = append(queryMods, mods...)

	return Authorities(queryMods...)
}

// Ticket pointed to by the foreign key.
func (o *TicketAuthority) Ticket(mods ...qm.QueryMod) ticketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ticket_id` = ?", o.TicketID),
	}

	queryMods = append(queryMods, mods...)

	return Tickets(queryMods...)
}

// LoadAuthority allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketAuthorityL) LoadAuthority(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketAuthority interface{}, mods queries.Applicator) error {
	var slice []*TicketAuthority
	var object *TicketAuthority

	if singular {
		var ok bool
		object, ok = maybeTicketAuthority.(*TicketAuthority)
		if !ok {
			object = new(TicketAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketAuthority))
			}
		}
	} else {
		s, ok := maybeTicketAuthority.(*[]*TicketAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketAuthority))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketAuthorityR{}
		}
		args[object.AuthorityID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketAuthorityR{}
			}

			args[obj.AuthorityID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`authority`),
		qm.WhereIn(`authority.authority_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Authority")
	}

	var resultSlice []*Authority
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Authority")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for authority")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authority")
	}

	if len(authorityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Authority = foreign
		if foreign.R == nil {
			foreign.R = &authorityR{}
		}
		foreign.R.TicketAuthorities = append(foreign.R.TicketAuthorities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorityID == foreign.AuthorityID {
				local.R.Authority = foreign
				if foreign.R == nil {
					foreign.R = &authorityR{}
				}
				foreign.R.TicketAuthorities = append(foreign.R.TicketAuthorities, local)
				break
			}
		}
	}

	return nil
}

// LoadTicket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketAuthorityL) LoadTicket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketAuthority interface{}, mods queries.Applicator) error {
	var slice []*TicketAuthority
	var object *TicketAuthority

	if singular {
		var ok bool
		object, ok = maybeTicketAuthority.(*TicketAuthority)
		if !ok {
			object = new(TicketAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketAuthority))
			}
		}
	} else {
		s, ok := maybeTicketAuthority.(*[]*TicketAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketAuthority))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketAuthorityR{}
		}
		args[object.TicketID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketAuthorityR{}
			}

			args[obj.TicketID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ticket`),
		qm.WhereIn(`ticket.ticket_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ticket")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ticket = foreign
		if foreign.R == nil {
			foreign.R = &ticketR{}
		}
		foreign.R.TicketAuthorities = append(foreign.R.TicketAuthorities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TicketID == foreign.TicketID {
				local.R.Ticket = foreign
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.TicketAuthorities = append(foreign.R.TicketAuthorities, local)
				break
			}
		}
	}

	return nil
}

// SetAuthority of the ticketAuthority to the related item.
// Sets o.R.Authority to related.
// Adds o to related.R.TicketAuthorities.
func (o *TicketAuthority) SetAuthority(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Authority) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ticket_authority` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"authority_id"}),
		strmangle.WhereClause("`", "`", 0, ticketAuthorityPrimaryKeyColumns),
	)
	values := []interface{}{related.AuthorityID, o.TicketID, o.AuthorityID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorityID = related.AuthorityID
	if o.R == nil {
		o.R = &ticketAuthorityR{
			Authority: related,
		}
	} else {
		o.R.Authority = related
	}

	if related.R == nil {
		related.R = &authorityR{
			TicketAuthorities: TicketAuthoritySlice{o},
		}
	} else {
		related.R.TicketAuthorities = append(related.R.TicketAuthorities, o)
	}

	return nil
}

// SetTicket of the ticketAuthority to the related item.
// Sets o.R.Ticket to related.
// Adds o to related.R.TicketAuthorities.
func (o *TicketAuthority) SetTicket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ticket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ticket_authority` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ticket_id"}),
		strmangle.WhereClause("`", "`", 0, ticketAuthorityPrimaryKeyColumns),
	)
	values := []interface{}{related.TicketID, o.TicketID, o.AuthorityID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TicketID = related.TicketID
	if o.R == nil {
		o.R = &ticketAuthorityR{
			Ticket: related,
		}
	} else {
		o.R.Ticket = related
	}

	if related.R == nil {
		related.R = &ticketR{
			TicketAuthorities: TicketAuthoritySlice{o},
		}
	} else {
		related.R.TicketAuthorities = append(related.R.TicketAuthorities, o)
	}

	return nil
}

// TicketAuthorities retrieves all the records using an executor.
func TicketAuthorities(mods ...qm.QueryMod) ticketAuthorityQuery {
	mods = append(mods, qm.From("`ticket_authority`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`ticket_authority`.*"})
	}

	return ticketAuthorityQuery{q}
}

// FindTicketAuthority retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicketAuthority(ctx context.Context, exec boil.ContextExecutor, ticketID int, authorityID int, selectCols ...string) (*TicketAuthority, error) {
	ticketAuthorityObj := &TicketAuthority{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ticket_authority` where `ticket_id`=? AND `authority_id`=?", sel,
	)

	q := queries.Raw(query, ticketID, authorityID)

	err := q.Bind(ctx, exec, ticketAuthorityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ticket_authority")
	}

	if err = ticketAuthorityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ticketAuthorityObj, err
	}

	return ticketAuthorityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TicketAuthority) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket_authority provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketAuthorityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ticketAuthorityInsertCacheMut.RLock()
	cache, cached := ticketAuthorityInsertCache[key]
	ticketAuthorityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ticketAuthorityAllColumns,
			ticketAuthorityColumnsWithDefault,
			ticketAuthorityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ticket_authority` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ticket_authority` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ticket_authority` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ticketAuthorityPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ticket_authority")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TicketID,
		o.AuthorityID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ticket_authority")
	}

CacheNoHooks:
	if !cached {
		ticketAuthorityInsertCacheMut.Lock()
		ticketAuthorityInsertCache[key] = cache
		ticketAuthorityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TicketAuthority.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TicketAuthority) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ticketAuthorityUpdateCacheMut.RLock()
	cache, cached := ticketAuthorityUpdateCache[key]
	ticketAuthorityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ticketAuthorityAllColumns,
			ticketAuthorityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ticket_authority, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ticket_authority` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ticketAuthorityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, append(wl, ticketAuthorityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ticket_authority row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ticket_authority")
	}

	if !cached {
		ticketAuthorityUpdateCacheMut.Lock()
		ticketAuthorityUpdateCache[key] = cache
		ticketAuthorityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ticketAuthorityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ticket_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ticket_authority")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TicketAuthoritySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ticket_authority` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketAuthorityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ticketAuthority slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ticketAuthority")
	}
	return rowsAff, nil
}

var mySQLTicketAuthorityUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TicketAuthority) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket_authority provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketAuthorityColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTicketAuthorityUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ticketAuthorityUpsertCacheMut.RLock()
	cache, cached := ticketAuthorityUpsertCache[key]
	ticketAuthorityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ticketAuthorityAllColumns,
			ticketAuthorityColumnsWithDefault,
			ticketAuthorityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ticketAuthorityAllColumns,
			ticketAuthorityPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ticket_authority, could not build update column list")
		}

		ret := strmangle.SetComplement(ticketAuthorityAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`ticket_authority`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ticket_authority` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ticket_authority")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(ticketAuthorityType, ticketAuthorityMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ticket_authority")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ticket_authority")
	}

CacheNoHooks:
	if !cached {
		ticketAuthorityUpsertCacheMut.Lock()
		ticketAuthorityUpsertCache[key] = cache
		ticketAuthorityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TicketAuthority record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TicketAuthority) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TicketAuthority provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ticketAuthorityPrimaryKeyMapping)
	sql := "DELETE FROM `ticket_authority` WHERE `ticket_id`=? AND `authority_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ticket_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ticket_authority")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ticketAuthorityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ticketAuthorityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticket_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket_authority")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TicketAuthoritySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ticketAuthorityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ticket_authority` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketAuthorityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticketAuthority slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket_authority")
	}

	if len(ticketAuthorityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TicketAuthority) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicketAuthority(ctx, exec, o.TicketID, o.AuthorityID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketAuthoritySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TicketAuthoritySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ticket_authority`.* FROM `ticket_authority` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketAuthorityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TicketAuthoritySlice")
	}

	*o = slice

	return nil
}

// TicketAuthorityExists checks if the TicketAuthority row exists.
func TicketAuthorityExists(ctx context.Context, exec boil.ContextExecutor, ticketID int, authorityID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ticket_authority` where `ticket_id`=? AND `authority_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ticketID, authorityID)
	}
	row := exec.QueryRowContext(ctx, sql, ticketID, authorityID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ticket_authority exists")
	}

	return exists, nil
}

// Exists checks if the TicketAuthority row exists.
func (o *TicketAuthority) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TicketAuthorityExists(ctx, exec, o.TicketID, o.AuthorityID)
}
