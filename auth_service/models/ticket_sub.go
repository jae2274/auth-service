// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TicketSub is an object representing the database table.
type TicketSub struct {
	TicketID int       `boil:"ticket_id" json:"ticket_id" toml:"ticket_id" yaml:"ticket_id"`
	UsedBy   int       `boil:"used_by" json:"used_by" toml:"used_by" yaml:"used_by"`
	UsedDate time.Time `boil:"used_date" json:"used_date" toml:"used_date" yaml:"used_date"`

	R *ticketSubR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ticketSubL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TicketSubColumns = struct {
	TicketID string
	UsedBy   string
	UsedDate string
}{
	TicketID: "ticket_id",
	UsedBy:   "used_by",
	UsedDate: "used_date",
}

var TicketSubTableColumns = struct {
	TicketID string
	UsedBy   string
	UsedDate string
}{
	TicketID: "ticket_sub.ticket_id",
	UsedBy:   "ticket_sub.used_by",
	UsedDate: "ticket_sub.used_date",
}

// Generated where

var TicketSubWhere = struct {
	TicketID whereHelperint
	UsedBy   whereHelperint
	UsedDate whereHelpertime_Time
}{
	TicketID: whereHelperint{field: "`ticket_sub`.`ticket_id`"},
	UsedBy:   whereHelperint{field: "`ticket_sub`.`used_by`"},
	UsedDate: whereHelpertime_Time{field: "`ticket_sub`.`used_date`"},
}

// TicketSubRels is where relationship names are stored.
var TicketSubRels = struct {
	Ticket     string
	UsedByUser string
}{
	Ticket:     "Ticket",
	UsedByUser: "UsedByUser",
}

// ticketSubR is where relationships are stored.
type ticketSubR struct {
	Ticket     *Ticket `boil:"Ticket" json:"Ticket" toml:"Ticket" yaml:"Ticket"`
	UsedByUser *User   `boil:"UsedByUser" json:"UsedByUser" toml:"UsedByUser" yaml:"UsedByUser"`
}

// NewStruct creates a new relationship struct
func (*ticketSubR) NewStruct() *ticketSubR {
	return &ticketSubR{}
}

func (r *ticketSubR) GetTicket() *Ticket {
	if r == nil {
		return nil
	}
	return r.Ticket
}

func (r *ticketSubR) GetUsedByUser() *User {
	if r == nil {
		return nil
	}
	return r.UsedByUser
}

// ticketSubL is where Load methods for each relationship are stored.
type ticketSubL struct{}

var (
	ticketSubAllColumns            = []string{"ticket_id", "used_by", "used_date"}
	ticketSubColumnsWithoutDefault = []string{"ticket_id", "used_by"}
	ticketSubColumnsWithDefault    = []string{"used_date"}
	ticketSubPrimaryKeyColumns     = []string{"ticket_id", "used_by"}
	ticketSubGeneratedColumns      = []string{}
)

type (
	// TicketSubSlice is an alias for a slice of pointers to TicketSub.
	// This should almost always be used instead of []TicketSub.
	TicketSubSlice []*TicketSub
	// TicketSubHook is the signature for custom TicketSub hook methods
	TicketSubHook func(context.Context, boil.ContextExecutor, *TicketSub) error

	ticketSubQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ticketSubType                 = reflect.TypeOf(&TicketSub{})
	ticketSubMapping              = queries.MakeStructMapping(ticketSubType)
	ticketSubPrimaryKeyMapping, _ = queries.BindMapping(ticketSubType, ticketSubMapping, ticketSubPrimaryKeyColumns)
	ticketSubInsertCacheMut       sync.RWMutex
	ticketSubInsertCache          = make(map[string]insertCache)
	ticketSubUpdateCacheMut       sync.RWMutex
	ticketSubUpdateCache          = make(map[string]updateCache)
	ticketSubUpsertCacheMut       sync.RWMutex
	ticketSubUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ticketSubAfterSelectMu sync.Mutex
var ticketSubAfterSelectHooks []TicketSubHook

var ticketSubBeforeInsertMu sync.Mutex
var ticketSubBeforeInsertHooks []TicketSubHook
var ticketSubAfterInsertMu sync.Mutex
var ticketSubAfterInsertHooks []TicketSubHook

var ticketSubBeforeUpdateMu sync.Mutex
var ticketSubBeforeUpdateHooks []TicketSubHook
var ticketSubAfterUpdateMu sync.Mutex
var ticketSubAfterUpdateHooks []TicketSubHook

var ticketSubBeforeDeleteMu sync.Mutex
var ticketSubBeforeDeleteHooks []TicketSubHook
var ticketSubAfterDeleteMu sync.Mutex
var ticketSubAfterDeleteHooks []TicketSubHook

var ticketSubBeforeUpsertMu sync.Mutex
var ticketSubBeforeUpsertHooks []TicketSubHook
var ticketSubAfterUpsertMu sync.Mutex
var ticketSubAfterUpsertHooks []TicketSubHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TicketSub) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TicketSub) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TicketSub) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TicketSub) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TicketSub) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TicketSub) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TicketSub) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TicketSub) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TicketSub) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketSubAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTicketSubHook registers your hook function for all future operations.
func AddTicketSubHook(hookPoint boil.HookPoint, ticketSubHook TicketSubHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ticketSubAfterSelectMu.Lock()
		ticketSubAfterSelectHooks = append(ticketSubAfterSelectHooks, ticketSubHook)
		ticketSubAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ticketSubBeforeInsertMu.Lock()
		ticketSubBeforeInsertHooks = append(ticketSubBeforeInsertHooks, ticketSubHook)
		ticketSubBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ticketSubAfterInsertMu.Lock()
		ticketSubAfterInsertHooks = append(ticketSubAfterInsertHooks, ticketSubHook)
		ticketSubAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ticketSubBeforeUpdateMu.Lock()
		ticketSubBeforeUpdateHooks = append(ticketSubBeforeUpdateHooks, ticketSubHook)
		ticketSubBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ticketSubAfterUpdateMu.Lock()
		ticketSubAfterUpdateHooks = append(ticketSubAfterUpdateHooks, ticketSubHook)
		ticketSubAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ticketSubBeforeDeleteMu.Lock()
		ticketSubBeforeDeleteHooks = append(ticketSubBeforeDeleteHooks, ticketSubHook)
		ticketSubBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ticketSubAfterDeleteMu.Lock()
		ticketSubAfterDeleteHooks = append(ticketSubAfterDeleteHooks, ticketSubHook)
		ticketSubAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ticketSubBeforeUpsertMu.Lock()
		ticketSubBeforeUpsertHooks = append(ticketSubBeforeUpsertHooks, ticketSubHook)
		ticketSubBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ticketSubAfterUpsertMu.Lock()
		ticketSubAfterUpsertHooks = append(ticketSubAfterUpsertHooks, ticketSubHook)
		ticketSubAfterUpsertMu.Unlock()
	}
}

// One returns a single ticketSub record from the query.
func (q ticketSubQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TicketSub, error) {
	o := &TicketSub{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ticket_sub")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TicketSub records from the query.
func (q ticketSubQuery) All(ctx context.Context, exec boil.ContextExecutor) (TicketSubSlice, error) {
	var o []*TicketSub

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TicketSub slice")
	}

	if len(ticketSubAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TicketSub records in the query.
func (q ticketSubQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ticket_sub rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ticketSubQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ticket_sub exists")
	}

	return count > 0, nil
}

// Ticket pointed to by the foreign key.
func (o *TicketSub) Ticket(mods ...qm.QueryMod) ticketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ticket_id` = ?", o.TicketID),
	}

	queryMods = append(queryMods, mods...)

	return Tickets(queryMods...)
}

// UsedByUser pointed to by the foreign key.
func (o *TicketSub) UsedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UsedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTicket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketSubL) LoadTicket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketSub interface{}, mods queries.Applicator) error {
	var slice []*TicketSub
	var object *TicketSub

	if singular {
		var ok bool
		object, ok = maybeTicketSub.(*TicketSub)
		if !ok {
			object = new(TicketSub)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketSub)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketSub))
			}
		}
	} else {
		s, ok := maybeTicketSub.(*[]*TicketSub)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketSub)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketSub))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketSubR{}
		}
		args[object.TicketID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketSubR{}
			}

			args[obj.TicketID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ticket`),
		qm.WhereIn(`ticket.ticket_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ticket")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ticket = foreign
		if foreign.R == nil {
			foreign.R = &ticketR{}
		}
		foreign.R.TicketSubs = append(foreign.R.TicketSubs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TicketID == foreign.TicketID {
				local.R.Ticket = foreign
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.TicketSubs = append(foreign.R.TicketSubs, local)
				break
			}
		}
	}

	return nil
}

// LoadUsedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketSubL) LoadUsedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketSub interface{}, mods queries.Applicator) error {
	var slice []*TicketSub
	var object *TicketSub

	if singular {
		var ok bool
		object, ok = maybeTicketSub.(*TicketSub)
		if !ok {
			object = new(TicketSub)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketSub)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketSub))
			}
		}
	} else {
		s, ok := maybeTicketSub.(*[]*TicketSub)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketSub)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketSub))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketSubR{}
		}
		args[object.UsedBy] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketSubR{}
			}

			args[obj.UsedBy] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UsedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsedByTicketSubs = append(foreign.R.UsedByTicketSubs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UsedBy == foreign.UserID {
				local.R.UsedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsedByTicketSubs = append(foreign.R.UsedByTicketSubs, local)
				break
			}
		}
	}

	return nil
}

// SetTicket of the ticketSub to the related item.
// Sets o.R.Ticket to related.
// Adds o to related.R.TicketSubs.
func (o *TicketSub) SetTicket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ticket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ticket_sub` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ticket_id"}),
		strmangle.WhereClause("`", "`", 0, ticketSubPrimaryKeyColumns),
	)
	values := []interface{}{related.TicketID, o.TicketID, o.UsedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TicketID = related.TicketID
	if o.R == nil {
		o.R = &ticketSubR{
			Ticket: related,
		}
	} else {
		o.R.Ticket = related
	}

	if related.R == nil {
		related.R = &ticketR{
			TicketSubs: TicketSubSlice{o},
		}
	} else {
		related.R.TicketSubs = append(related.R.TicketSubs, o)
	}

	return nil
}

// SetUsedByUser of the ticketSub to the related item.
// Sets o.R.UsedByUser to related.
// Adds o to related.R.UsedByTicketSubs.
func (o *TicketSub) SetUsedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ticket_sub` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"used_by"}),
		strmangle.WhereClause("`", "`", 0, ticketSubPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.TicketID, o.UsedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UsedBy = related.UserID
	if o.R == nil {
		o.R = &ticketSubR{
			UsedByUser: related,
		}
	} else {
		o.R.UsedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UsedByTicketSubs: TicketSubSlice{o},
		}
	} else {
		related.R.UsedByTicketSubs = append(related.R.UsedByTicketSubs, o)
	}

	return nil
}

// TicketSubs retrieves all the records using an executor.
func TicketSubs(mods ...qm.QueryMod) ticketSubQuery {
	mods = append(mods, qm.From("`ticket_sub`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`ticket_sub`.*"})
	}

	return ticketSubQuery{q}
}

// FindTicketSub retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicketSub(ctx context.Context, exec boil.ContextExecutor, ticketID int, usedBy int, selectCols ...string) (*TicketSub, error) {
	ticketSubObj := &TicketSub{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ticket_sub` where `ticket_id`=? AND `used_by`=?", sel,
	)

	q := queries.Raw(query, ticketID, usedBy)

	err := q.Bind(ctx, exec, ticketSubObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ticket_sub")
	}

	if err = ticketSubObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ticketSubObj, err
	}

	return ticketSubObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TicketSub) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket_sub provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketSubColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ticketSubInsertCacheMut.RLock()
	cache, cached := ticketSubInsertCache[key]
	ticketSubInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ticketSubAllColumns,
			ticketSubColumnsWithDefault,
			ticketSubColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ticketSubType, ticketSubMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ticketSubType, ticketSubMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ticket_sub` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ticket_sub` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ticket_sub` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ticketSubPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ticket_sub")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TicketID,
		o.UsedBy,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ticket_sub")
	}

CacheNoHooks:
	if !cached {
		ticketSubInsertCacheMut.Lock()
		ticketSubInsertCache[key] = cache
		ticketSubInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TicketSub.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TicketSub) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ticketSubUpdateCacheMut.RLock()
	cache, cached := ticketSubUpdateCache[key]
	ticketSubUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ticketSubAllColumns,
			ticketSubPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ticket_sub, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ticket_sub` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ticketSubPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ticketSubType, ticketSubMapping, append(wl, ticketSubPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ticket_sub row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ticket_sub")
	}

	if !cached {
		ticketSubUpdateCacheMut.Lock()
		ticketSubUpdateCache[key] = cache
		ticketSubUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ticketSubQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ticket_sub")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ticket_sub")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TicketSubSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketSubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ticket_sub` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketSubPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ticketSub slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ticketSub")
	}
	return rowsAff, nil
}

var mySQLTicketSubUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TicketSub) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket_sub provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketSubColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTicketSubUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ticketSubUpsertCacheMut.RLock()
	cache, cached := ticketSubUpsertCache[key]
	ticketSubUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ticketSubAllColumns,
			ticketSubColumnsWithDefault,
			ticketSubColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ticketSubAllColumns,
			ticketSubPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ticket_sub, could not build update column list")
		}

		ret := strmangle.SetComplement(ticketSubAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`ticket_sub`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ticket_sub` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(ticketSubType, ticketSubMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ticketSubType, ticketSubMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ticket_sub")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(ticketSubType, ticketSubMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ticket_sub")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ticket_sub")
	}

CacheNoHooks:
	if !cached {
		ticketSubUpsertCacheMut.Lock()
		ticketSubUpsertCache[key] = cache
		ticketSubUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TicketSub record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TicketSub) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TicketSub provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ticketSubPrimaryKeyMapping)
	sql := "DELETE FROM `ticket_sub` WHERE `ticket_id`=? AND `used_by`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ticket_sub")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ticket_sub")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ticketSubQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ticketSubQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticket_sub")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket_sub")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TicketSubSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ticketSubBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketSubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ticket_sub` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketSubPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticketSub slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket_sub")
	}

	if len(ticketSubAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TicketSub) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicketSub(ctx, exec, o.TicketID, o.UsedBy)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketSubSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TicketSubSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketSubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ticket_sub`.* FROM `ticket_sub` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketSubPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TicketSubSlice")
	}

	*o = slice

	return nil
}

// TicketSubExists checks if the TicketSub row exists.
func TicketSubExists(ctx context.Context, exec boil.ContextExecutor, ticketID int, usedBy int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ticket_sub` where `ticket_id`=? AND `used_by`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ticketID, usedBy)
	}
	row := exec.QueryRowContext(ctx, sql, ticketID, usedBy)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ticket_sub exists")
	}

	return exists, nil
}

// Exists checks if the TicketSub row exists.
func (o *TicketSub) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TicketSubExists(ctx, exec, o.TicketID, o.UsedBy)
}
