// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TicketUsed is an object representing the database table.
type TicketUsed struct {
	TicketID int       `boil:"ticket_id" json:"ticket_id" toml:"ticket_id" yaml:"ticket_id"`
	UsedBy   int       `boil:"used_by" json:"used_by" toml:"used_by" yaml:"used_by"`
	UsedDate time.Time `boil:"used_date" json:"used_date" toml:"used_date" yaml:"used_date"`

	R *ticketUsedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ticketUsedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TicketUsedColumns = struct {
	TicketID string
	UsedBy   string
	UsedDate string
}{
	TicketID: "ticket_id",
	UsedBy:   "used_by",
	UsedDate: "used_date",
}

var TicketUsedTableColumns = struct {
	TicketID string
	UsedBy   string
	UsedDate string
}{
	TicketID: "ticket_used.ticket_id",
	UsedBy:   "ticket_used.used_by",
	UsedDate: "ticket_used.used_date",
}

// Generated where

var TicketUsedWhere = struct {
	TicketID whereHelperint
	UsedBy   whereHelperint
	UsedDate whereHelpertime_Time
}{
	TicketID: whereHelperint{field: "`ticket_used`.`ticket_id`"},
	UsedBy:   whereHelperint{field: "`ticket_used`.`used_by`"},
	UsedDate: whereHelpertime_Time{field: "`ticket_used`.`used_date`"},
}

// TicketUsedRels is where relationship names are stored.
var TicketUsedRels = struct {
	Ticket     string
	UsedByUser string
}{
	Ticket:     "Ticket",
	UsedByUser: "UsedByUser",
}

// ticketUsedR is where relationships are stored.
type ticketUsedR struct {
	Ticket     *Ticket `boil:"Ticket" json:"Ticket" toml:"Ticket" yaml:"Ticket"`
	UsedByUser *User   `boil:"UsedByUser" json:"UsedByUser" toml:"UsedByUser" yaml:"UsedByUser"`
}

// NewStruct creates a new relationship struct
func (*ticketUsedR) NewStruct() *ticketUsedR {
	return &ticketUsedR{}
}

func (r *ticketUsedR) GetTicket() *Ticket {
	if r == nil {
		return nil
	}
	return r.Ticket
}

func (r *ticketUsedR) GetUsedByUser() *User {
	if r == nil {
		return nil
	}
	return r.UsedByUser
}

// ticketUsedL is where Load methods for each relationship are stored.
type ticketUsedL struct{}

var (
	ticketUsedAllColumns            = []string{"ticket_id", "used_by", "used_date"}
	ticketUsedColumnsWithoutDefault = []string{"ticket_id", "used_by"}
	ticketUsedColumnsWithDefault    = []string{"used_date"}
	ticketUsedPrimaryKeyColumns     = []string{"ticket_id", "used_by"}
	ticketUsedGeneratedColumns      = []string{}
)

type (
	// TicketUsedSlice is an alias for a slice of pointers to TicketUsed.
	// This should almost always be used instead of []TicketUsed.
	TicketUsedSlice []*TicketUsed
	// TicketUsedHook is the signature for custom TicketUsed hook methods
	TicketUsedHook func(context.Context, boil.ContextExecutor, *TicketUsed) error

	ticketUsedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ticketUsedType                 = reflect.TypeOf(&TicketUsed{})
	ticketUsedMapping              = queries.MakeStructMapping(ticketUsedType)
	ticketUsedPrimaryKeyMapping, _ = queries.BindMapping(ticketUsedType, ticketUsedMapping, ticketUsedPrimaryKeyColumns)
	ticketUsedInsertCacheMut       sync.RWMutex
	ticketUsedInsertCache          = make(map[string]insertCache)
	ticketUsedUpdateCacheMut       sync.RWMutex
	ticketUsedUpdateCache          = make(map[string]updateCache)
	ticketUsedUpsertCacheMut       sync.RWMutex
	ticketUsedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ticketUsedAfterSelectMu sync.Mutex
var ticketUsedAfterSelectHooks []TicketUsedHook

var ticketUsedBeforeInsertMu sync.Mutex
var ticketUsedBeforeInsertHooks []TicketUsedHook
var ticketUsedAfterInsertMu sync.Mutex
var ticketUsedAfterInsertHooks []TicketUsedHook

var ticketUsedBeforeUpdateMu sync.Mutex
var ticketUsedBeforeUpdateHooks []TicketUsedHook
var ticketUsedAfterUpdateMu sync.Mutex
var ticketUsedAfterUpdateHooks []TicketUsedHook

var ticketUsedBeforeDeleteMu sync.Mutex
var ticketUsedBeforeDeleteHooks []TicketUsedHook
var ticketUsedAfterDeleteMu sync.Mutex
var ticketUsedAfterDeleteHooks []TicketUsedHook

var ticketUsedBeforeUpsertMu sync.Mutex
var ticketUsedBeforeUpsertHooks []TicketUsedHook
var ticketUsedAfterUpsertMu sync.Mutex
var ticketUsedAfterUpsertHooks []TicketUsedHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TicketUsed) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TicketUsed) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TicketUsed) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TicketUsed) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TicketUsed) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TicketUsed) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TicketUsed) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TicketUsed) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TicketUsed) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ticketUsedAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTicketUsedHook registers your hook function for all future operations.
func AddTicketUsedHook(hookPoint boil.HookPoint, ticketUsedHook TicketUsedHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ticketUsedAfterSelectMu.Lock()
		ticketUsedAfterSelectHooks = append(ticketUsedAfterSelectHooks, ticketUsedHook)
		ticketUsedAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ticketUsedBeforeInsertMu.Lock()
		ticketUsedBeforeInsertHooks = append(ticketUsedBeforeInsertHooks, ticketUsedHook)
		ticketUsedBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ticketUsedAfterInsertMu.Lock()
		ticketUsedAfterInsertHooks = append(ticketUsedAfterInsertHooks, ticketUsedHook)
		ticketUsedAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ticketUsedBeforeUpdateMu.Lock()
		ticketUsedBeforeUpdateHooks = append(ticketUsedBeforeUpdateHooks, ticketUsedHook)
		ticketUsedBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ticketUsedAfterUpdateMu.Lock()
		ticketUsedAfterUpdateHooks = append(ticketUsedAfterUpdateHooks, ticketUsedHook)
		ticketUsedAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ticketUsedBeforeDeleteMu.Lock()
		ticketUsedBeforeDeleteHooks = append(ticketUsedBeforeDeleteHooks, ticketUsedHook)
		ticketUsedBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ticketUsedAfterDeleteMu.Lock()
		ticketUsedAfterDeleteHooks = append(ticketUsedAfterDeleteHooks, ticketUsedHook)
		ticketUsedAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ticketUsedBeforeUpsertMu.Lock()
		ticketUsedBeforeUpsertHooks = append(ticketUsedBeforeUpsertHooks, ticketUsedHook)
		ticketUsedBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ticketUsedAfterUpsertMu.Lock()
		ticketUsedAfterUpsertHooks = append(ticketUsedAfterUpsertHooks, ticketUsedHook)
		ticketUsedAfterUpsertMu.Unlock()
	}
}

// One returns a single ticketUsed record from the query.
func (q ticketUsedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TicketUsed, error) {
	o := &TicketUsed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ticket_used")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TicketUsed records from the query.
func (q ticketUsedQuery) All(ctx context.Context, exec boil.ContextExecutor) (TicketUsedSlice, error) {
	var o []*TicketUsed

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TicketUsed slice")
	}

	if len(ticketUsedAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TicketUsed records in the query.
func (q ticketUsedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ticket_used rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ticketUsedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ticket_used exists")
	}

	return count > 0, nil
}

// Ticket pointed to by the foreign key.
func (o *TicketUsed) Ticket(mods ...qm.QueryMod) ticketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ticket_id` = ?", o.TicketID),
	}

	queryMods = append(queryMods, mods...)

	return Tickets(queryMods...)
}

// UsedByUser pointed to by the foreign key.
func (o *TicketUsed) UsedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UsedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTicket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketUsedL) LoadTicket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketUsed interface{}, mods queries.Applicator) error {
	var slice []*TicketUsed
	var object *TicketUsed

	if singular {
		var ok bool
		object, ok = maybeTicketUsed.(*TicketUsed)
		if !ok {
			object = new(TicketUsed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketUsed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketUsed))
			}
		}
	} else {
		s, ok := maybeTicketUsed.(*[]*TicketUsed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketUsed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketUsed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketUsedR{}
		}
		args[object.TicketID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketUsedR{}
			}

			args[obj.TicketID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`ticket`),
		qm.WhereIn(`ticket.ticket_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ticket")
	}

	var resultSlice []*Ticket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ticket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ticket")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ticket")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ticket = foreign
		if foreign.R == nil {
			foreign.R = &ticketR{}
		}
		foreign.R.TicketUseds = append(foreign.R.TicketUseds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TicketID == foreign.TicketID {
				local.R.Ticket = foreign
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.TicketUseds = append(foreign.R.TicketUseds, local)
				break
			}
		}
	}

	return nil
}

// LoadUsedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (ticketUsedL) LoadUsedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTicketUsed interface{}, mods queries.Applicator) error {
	var slice []*TicketUsed
	var object *TicketUsed

	if singular {
		var ok bool
		object, ok = maybeTicketUsed.(*TicketUsed)
		if !ok {
			object = new(TicketUsed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTicketUsed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTicketUsed))
			}
		}
	} else {
		s, ok := maybeTicketUsed.(*[]*TicketUsed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTicketUsed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTicketUsed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &ticketUsedR{}
		}
		args[object.UsedBy] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ticketUsedR{}
			}

			args[obj.UsedBy] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UsedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsedByTicketUseds = append(foreign.R.UsedByTicketUseds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UsedBy == foreign.UserID {
				local.R.UsedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsedByTicketUseds = append(foreign.R.UsedByTicketUseds, local)
				break
			}
		}
	}

	return nil
}

// SetTicket of the ticketUsed to the related item.
// Sets o.R.Ticket to related.
// Adds o to related.R.TicketUseds.
func (o *TicketUsed) SetTicket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Ticket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ticket_used` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ticket_id"}),
		strmangle.WhereClause("`", "`", 0, ticketUsedPrimaryKeyColumns),
	)
	values := []interface{}{related.TicketID, o.TicketID, o.UsedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TicketID = related.TicketID
	if o.R == nil {
		o.R = &ticketUsedR{
			Ticket: related,
		}
	} else {
		o.R.Ticket = related
	}

	if related.R == nil {
		related.R = &ticketR{
			TicketUseds: TicketUsedSlice{o},
		}
	} else {
		related.R.TicketUseds = append(related.R.TicketUseds, o)
	}

	return nil
}

// SetUsedByUser of the ticketUsed to the related item.
// Sets o.R.UsedByUser to related.
// Adds o to related.R.UsedByTicketUseds.
func (o *TicketUsed) SetUsedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ticket_used` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"used_by"}),
		strmangle.WhereClause("`", "`", 0, ticketUsedPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.TicketID, o.UsedBy}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UsedBy = related.UserID
	if o.R == nil {
		o.R = &ticketUsedR{
			UsedByUser: related,
		}
	} else {
		o.R.UsedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UsedByTicketUseds: TicketUsedSlice{o},
		}
	} else {
		related.R.UsedByTicketUseds = append(related.R.UsedByTicketUseds, o)
	}

	return nil
}

// TicketUseds retrieves all the records using an executor.
func TicketUseds(mods ...qm.QueryMod) ticketUsedQuery {
	mods = append(mods, qm.From("`ticket_used`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`ticket_used`.*"})
	}

	return ticketUsedQuery{q}
}

// FindTicketUsed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicketUsed(ctx context.Context, exec boil.ContextExecutor, ticketID int, usedBy int, selectCols ...string) (*TicketUsed, error) {
	ticketUsedObj := &TicketUsed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ticket_used` where `ticket_id`=? AND `used_by`=?", sel,
	)

	q := queries.Raw(query, ticketID, usedBy)

	err := q.Bind(ctx, exec, ticketUsedObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ticket_used")
	}

	if err = ticketUsedObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ticketUsedObj, err
	}

	return ticketUsedObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TicketUsed) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket_used provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketUsedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ticketUsedInsertCacheMut.RLock()
	cache, cached := ticketUsedInsertCache[key]
	ticketUsedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ticketUsedAllColumns,
			ticketUsedColumnsWithDefault,
			ticketUsedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ticketUsedType, ticketUsedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ticketUsedType, ticketUsedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ticket_used` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ticket_used` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ticket_used` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ticketUsedPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ticket_used")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TicketID,
		o.UsedBy,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ticket_used")
	}

CacheNoHooks:
	if !cached {
		ticketUsedInsertCacheMut.Lock()
		ticketUsedInsertCache[key] = cache
		ticketUsedInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TicketUsed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TicketUsed) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ticketUsedUpdateCacheMut.RLock()
	cache, cached := ticketUsedUpdateCache[key]
	ticketUsedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ticketUsedAllColumns,
			ticketUsedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ticket_used, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ticket_used` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ticketUsedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ticketUsedType, ticketUsedMapping, append(wl, ticketUsedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ticket_used row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ticket_used")
	}

	if !cached {
		ticketUsedUpdateCacheMut.Lock()
		ticketUsedUpdateCache[key] = cache
		ticketUsedUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ticketUsedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ticket_used")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ticket_used")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TicketUsedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketUsedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ticket_used` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketUsedPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ticketUsed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ticketUsed")
	}
	return rowsAff, nil
}

var mySQLTicketUsedUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TicketUsed) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ticket_used provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ticketUsedColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTicketUsedUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ticketUsedUpsertCacheMut.RLock()
	cache, cached := ticketUsedUpsertCache[key]
	ticketUsedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ticketUsedAllColumns,
			ticketUsedColumnsWithDefault,
			ticketUsedColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ticketUsedAllColumns,
			ticketUsedPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ticket_used, could not build update column list")
		}

		ret := strmangle.SetComplement(ticketUsedAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`ticket_used`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ticket_used` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(ticketUsedType, ticketUsedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ticketUsedType, ticketUsedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ticket_used")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(ticketUsedType, ticketUsedMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ticket_used")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ticket_used")
	}

CacheNoHooks:
	if !cached {
		ticketUsedUpsertCacheMut.Lock()
		ticketUsedUpsertCache[key] = cache
		ticketUsedUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TicketUsed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TicketUsed) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TicketUsed provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ticketUsedPrimaryKeyMapping)
	sql := "DELETE FROM `ticket_used` WHERE `ticket_id`=? AND `used_by`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ticket_used")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ticket_used")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ticketUsedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ticketUsedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticket_used")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket_used")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TicketUsedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ticketUsedBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketUsedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ticket_used` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketUsedPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ticketUsed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ticket_used")
	}

	if len(ticketUsedAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TicketUsed) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTicketUsed(ctx, exec, o.TicketID, o.UsedBy)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TicketUsedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TicketUsedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ticketUsedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ticket_used`.* FROM `ticket_used` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ticketUsedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TicketUsedSlice")
	}

	*o = slice

	return nil
}

// TicketUsedExists checks if the TicketUsed row exists.
func TicketUsedExists(ctx context.Context, exec boil.ContextExecutor, ticketID int, usedBy int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ticket_used` where `ticket_id`=? AND `used_by`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ticketID, usedBy)
	}
	row := exec.QueryRowContext(ctx, sql, ticketID, usedBy)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ticket_used exists")
	}

	return exists, nil
}

// Exists checks if the TicketUsed row exists.
func (o *TicketUsed) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TicketUsedExists(ctx, exec, o.TicketID, o.UsedBy)
}
