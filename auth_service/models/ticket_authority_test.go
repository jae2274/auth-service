// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTicketAuthorities(t *testing.T) {
	t.Parallel()

	query := TicketAuthorities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketAuthoritiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketAuthoritiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TicketAuthorities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketAuthoritiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketAuthoritySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketAuthoritiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketAuthorityExists(ctx, tx, o.TicketID, o.AuthorityID)
	if err != nil {
		t.Errorf("Unable to check if TicketAuthority exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketAuthorityExists to return true, but got false.")
	}
}

func testTicketAuthoritiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketAuthorityFound, err := FindTicketAuthority(ctx, tx, o.TicketID, o.AuthorityID)
	if err != nil {
		t.Error(err)
	}

	if ticketAuthorityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketAuthoritiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TicketAuthorities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketAuthoritiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TicketAuthorities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketAuthoritiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketAuthorityOne := &TicketAuthority{}
	ticketAuthorityTwo := &TicketAuthority{}
	if err = randomize.Struct(seed, ticketAuthorityOne, ticketAuthorityDBTypes, false, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketAuthorityTwo, ticketAuthorityDBTypes, false, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketAuthorityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketAuthorityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketAuthorities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketAuthoritiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketAuthorityOne := &TicketAuthority{}
	ticketAuthorityTwo := &TicketAuthority{}
	if err = randomize.Struct(seed, ticketAuthorityOne, ticketAuthorityDBTypes, false, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketAuthorityTwo, ticketAuthorityDBTypes, false, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketAuthorityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketAuthorityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketAuthorityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func ticketAuthorityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketAuthority) error {
	*o = TicketAuthority{}
	return nil
}

func testTicketAuthoritiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TicketAuthority{}
	o := &TicketAuthority{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketAuthority object: %s", err)
	}

	AddTicketAuthorityHook(boil.BeforeInsertHook, ticketAuthorityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityBeforeInsertHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.AfterInsertHook, ticketAuthorityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityAfterInsertHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.AfterSelectHook, ticketAuthorityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityAfterSelectHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.BeforeUpdateHook, ticketAuthorityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityBeforeUpdateHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.AfterUpdateHook, ticketAuthorityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityAfterUpdateHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.BeforeDeleteHook, ticketAuthorityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityBeforeDeleteHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.AfterDeleteHook, ticketAuthorityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityAfterDeleteHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.BeforeUpsertHook, ticketAuthorityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityBeforeUpsertHooks = []TicketAuthorityHook{}

	AddTicketAuthorityHook(boil.AfterUpsertHook, ticketAuthorityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketAuthorityAfterUpsertHooks = []TicketAuthorityHook{}
}

func testTicketAuthoritiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketAuthoritiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ticketAuthorityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketAuthorityToOneAuthorityUsingAuthority(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TicketAuthority
	var foreign Authority

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketAuthorityDBTypes, false, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorityDBTypes, false, authorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authority struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorityID = foreign.AuthorityID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Authority().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AuthorityID != foreign.AuthorityID {
		t.Errorf("want: %v, got %v", foreign.AuthorityID, check.AuthorityID)
	}

	ranAfterSelectHook := false
	AddAuthorityHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Authority) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TicketAuthoritySlice{&local}
	if err = local.L.LoadAuthority(ctx, tx, false, (*[]*TicketAuthority)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Authority = nil
	if err = local.L.LoadAuthority(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTicketAuthorityToOneTicketUsingTicket(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TicketAuthority
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketAuthorityDBTypes, false, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TicketID = foreign.TicketID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TicketID != foreign.TicketID {
		t.Errorf("want: %v, got %v", foreign.TicketID, check.TicketID)
	}

	ranAfterSelectHook := false
	AddTicketHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TicketAuthoritySlice{&local}
	if err = local.L.LoadTicket(ctx, tx, false, (*[]*TicketAuthority)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTicketAuthorityToOneSetOpAuthorityUsingAuthority(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TicketAuthority
	var b, c Authority

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketAuthorityDBTypes, false, strmangle.SetComplement(ticketAuthorityPrimaryKeyColumns, ticketAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorityDBTypes, false, strmangle.SetComplement(authorityPrimaryKeyColumns, authorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorityDBTypes, false, strmangle.SetComplement(authorityPrimaryKeyColumns, authorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Authority{&b, &c} {
		err = a.SetAuthority(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Authority != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketAuthorities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorityID != x.AuthorityID {
			t.Error("foreign key was wrong value", a.AuthorityID)
		}

		if exists, err := TicketAuthorityExists(ctx, tx, a.TicketID, a.AuthorityID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTicketAuthorityToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TicketAuthority
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketAuthorityDBTypes, false, strmangle.SetComplement(ticketAuthorityPrimaryKeyColumns, ticketAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketAuthorities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TicketID != x.TicketID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		if exists, err := TicketAuthorityExists(ctx, tx, a.TicketID, a.AuthorityID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTicketAuthoritiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketAuthoritiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketAuthoritySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketAuthoritiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketAuthorities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketAuthorityDBTypes = map[string]string{`TicketID`: `int`, `AuthorityID`: `int`, `ExpiryDuration`: `timestamp`}
	_                      = bytes.MinRead
)

func testTicketAuthoritiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketAuthorityAllColumns) == len(ticketAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketAuthoritiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketAuthorityAllColumns) == len(ticketAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketAuthority{}
	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketAuthorityDBTypes, true, ticketAuthorityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketAuthorityAllColumns, ticketAuthorityPrimaryKeyColumns) {
		fields = ticketAuthorityAllColumns
	} else {
		fields = strmangle.SetComplement(
			ticketAuthorityAllColumns,
			ticketAuthorityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketAuthoritySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketAuthoritiesUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketAuthorityAllColumns) == len(ticketAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTicketAuthorityUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TicketAuthority{}
	if err = randomize.Struct(seed, &o, ticketAuthorityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketAuthority: %s", err)
	}

	count, err := TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketAuthorityDBTypes, false, ticketAuthorityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketAuthority struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketAuthority: %s", err)
	}

	count, err = TicketAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
