// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAuthority is an object representing the database table.
type UserAuthority struct {
	UserID      int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AuthorityID int       `boil:"authority_id" json:"authority_id" toml:"authority_id" yaml:"authority_id"`
	ExpiryDate  null.Time `boil:"expiry_date" json:"expiry_date,omitempty" toml:"expiry_date" yaml:"expiry_date,omitempty"`
	CreatedDate time.Time `boil:"created_date" json:"created_date" toml:"created_date" yaml:"created_date"`
	UpdatedDate time.Time `boil:"updated_date" json:"updated_date" toml:"updated_date" yaml:"updated_date"`

	R *userAuthorityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAuthorityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAuthorityColumns = struct {
	UserID      string
	AuthorityID string
	ExpiryDate  string
	CreatedDate string
	UpdatedDate string
}{
	UserID:      "user_id",
	AuthorityID: "authority_id",
	ExpiryDate:  "expiry_date",
	CreatedDate: "created_date",
	UpdatedDate: "updated_date",
}

var UserAuthorityTableColumns = struct {
	UserID      string
	AuthorityID string
	ExpiryDate  string
	CreatedDate string
	UpdatedDate string
}{
	UserID:      "user_authority.user_id",
	AuthorityID: "user_authority.authority_id",
	ExpiryDate:  "user_authority.expiry_date",
	CreatedDate: "user_authority.created_date",
	UpdatedDate: "user_authority.updated_date",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UserAuthorityWhere = struct {
	UserID      whereHelperint
	AuthorityID whereHelperint
	ExpiryDate  whereHelpernull_Time
	CreatedDate whereHelpertime_Time
	UpdatedDate whereHelpertime_Time
}{
	UserID:      whereHelperint{field: "`user_authority`.`user_id`"},
	AuthorityID: whereHelperint{field: "`user_authority`.`authority_id`"},
	ExpiryDate:  whereHelpernull_Time{field: "`user_authority`.`expiry_date`"},
	CreatedDate: whereHelpertime_Time{field: "`user_authority`.`created_date`"},
	UpdatedDate: whereHelpertime_Time{field: "`user_authority`.`updated_date`"},
}

// UserAuthorityRels is where relationship names are stored.
var UserAuthorityRels = struct {
	Authority string
	User      string
}{
	Authority: "Authority",
	User:      "User",
}

// userAuthorityR is where relationships are stored.
type userAuthorityR struct {
	Authority *Authority `boil:"Authority" json:"Authority" toml:"Authority" yaml:"Authority"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userAuthorityR) NewStruct() *userAuthorityR {
	return &userAuthorityR{}
}

func (r *userAuthorityR) GetAuthority() *Authority {
	if r == nil {
		return nil
	}
	return r.Authority
}

func (r *userAuthorityR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userAuthorityL is where Load methods for each relationship are stored.
type userAuthorityL struct{}

var (
	userAuthorityAllColumns            = []string{"user_id", "authority_id", "expiry_date", "created_date", "updated_date"}
	userAuthorityColumnsWithoutDefault = []string{"user_id", "authority_id", "expiry_date"}
	userAuthorityColumnsWithDefault    = []string{"created_date", "updated_date"}
	userAuthorityPrimaryKeyColumns     = []string{"user_id", "authority_id"}
	userAuthorityGeneratedColumns      = []string{}
)

type (
	// UserAuthoritySlice is an alias for a slice of pointers to UserAuthority.
	// This should almost always be used instead of []UserAuthority.
	UserAuthoritySlice []*UserAuthority
	// UserAuthorityHook is the signature for custom UserAuthority hook methods
	UserAuthorityHook func(context.Context, boil.ContextExecutor, *UserAuthority) error

	userAuthorityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAuthorityType                 = reflect.TypeOf(&UserAuthority{})
	userAuthorityMapping              = queries.MakeStructMapping(userAuthorityType)
	userAuthorityPrimaryKeyMapping, _ = queries.BindMapping(userAuthorityType, userAuthorityMapping, userAuthorityPrimaryKeyColumns)
	userAuthorityInsertCacheMut       sync.RWMutex
	userAuthorityInsertCache          = make(map[string]insertCache)
	userAuthorityUpdateCacheMut       sync.RWMutex
	userAuthorityUpdateCache          = make(map[string]updateCache)
	userAuthorityUpsertCacheMut       sync.RWMutex
	userAuthorityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAuthorityAfterSelectMu sync.Mutex
var userAuthorityAfterSelectHooks []UserAuthorityHook

var userAuthorityBeforeInsertMu sync.Mutex
var userAuthorityBeforeInsertHooks []UserAuthorityHook
var userAuthorityAfterInsertMu sync.Mutex
var userAuthorityAfterInsertHooks []UserAuthorityHook

var userAuthorityBeforeUpdateMu sync.Mutex
var userAuthorityBeforeUpdateHooks []UserAuthorityHook
var userAuthorityAfterUpdateMu sync.Mutex
var userAuthorityAfterUpdateHooks []UserAuthorityHook

var userAuthorityBeforeDeleteMu sync.Mutex
var userAuthorityBeforeDeleteHooks []UserAuthorityHook
var userAuthorityAfterDeleteMu sync.Mutex
var userAuthorityAfterDeleteHooks []UserAuthorityHook

var userAuthorityBeforeUpsertMu sync.Mutex
var userAuthorityBeforeUpsertHooks []UserAuthorityHook
var userAuthorityAfterUpsertMu sync.Mutex
var userAuthorityAfterUpsertHooks []UserAuthorityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAuthority) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAuthority) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAuthority) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAuthority) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAuthority) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAuthority) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAuthority) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAuthority) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAuthority) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAuthorityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAuthorityHook registers your hook function for all future operations.
func AddUserAuthorityHook(hookPoint boil.HookPoint, userAuthorityHook UserAuthorityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAuthorityAfterSelectMu.Lock()
		userAuthorityAfterSelectHooks = append(userAuthorityAfterSelectHooks, userAuthorityHook)
		userAuthorityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userAuthorityBeforeInsertMu.Lock()
		userAuthorityBeforeInsertHooks = append(userAuthorityBeforeInsertHooks, userAuthorityHook)
		userAuthorityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userAuthorityAfterInsertMu.Lock()
		userAuthorityAfterInsertHooks = append(userAuthorityAfterInsertHooks, userAuthorityHook)
		userAuthorityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userAuthorityBeforeUpdateMu.Lock()
		userAuthorityBeforeUpdateHooks = append(userAuthorityBeforeUpdateHooks, userAuthorityHook)
		userAuthorityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userAuthorityAfterUpdateMu.Lock()
		userAuthorityAfterUpdateHooks = append(userAuthorityAfterUpdateHooks, userAuthorityHook)
		userAuthorityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userAuthorityBeforeDeleteMu.Lock()
		userAuthorityBeforeDeleteHooks = append(userAuthorityBeforeDeleteHooks, userAuthorityHook)
		userAuthorityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userAuthorityAfterDeleteMu.Lock()
		userAuthorityAfterDeleteHooks = append(userAuthorityAfterDeleteHooks, userAuthorityHook)
		userAuthorityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userAuthorityBeforeUpsertMu.Lock()
		userAuthorityBeforeUpsertHooks = append(userAuthorityBeforeUpsertHooks, userAuthorityHook)
		userAuthorityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userAuthorityAfterUpsertMu.Lock()
		userAuthorityAfterUpsertHooks = append(userAuthorityAfterUpsertHooks, userAuthorityHook)
		userAuthorityAfterUpsertMu.Unlock()
	}
}

// One returns a single userAuthority record from the query.
func (q userAuthorityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAuthority, error) {
	o := &UserAuthority{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_authority")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAuthority records from the query.
func (q userAuthorityQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAuthoritySlice, error) {
	var o []*UserAuthority

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserAuthority slice")
	}

	if len(userAuthorityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAuthority records in the query.
func (q userAuthorityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_authority rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAuthorityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_authority exists")
	}

	return count > 0, nil
}

// Authority pointed to by the foreign key.
func (o *UserAuthority) Authority(mods ...qm.QueryMod) authorityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`authority_id` = ?", o.AuthorityID),
	}

	queryMods = append(queryMods, mods...)

	return Authorities(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserAuthority) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadAuthority allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAuthorityL) LoadAuthority(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAuthority interface{}, mods queries.Applicator) error {
	var slice []*UserAuthority
	var object *UserAuthority

	if singular {
		var ok bool
		object, ok = maybeUserAuthority.(*UserAuthority)
		if !ok {
			object = new(UserAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAuthority))
			}
		}
	} else {
		s, ok := maybeUserAuthority.(*[]*UserAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAuthority))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userAuthorityR{}
		}
		args[object.AuthorityID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAuthorityR{}
			}

			args[obj.AuthorityID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`authority`),
		qm.WhereIn(`authority.authority_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Authority")
	}

	var resultSlice []*Authority
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Authority")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for authority")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authority")
	}

	if len(authorityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Authority = foreign
		if foreign.R == nil {
			foreign.R = &authorityR{}
		}
		foreign.R.UserAuthorities = append(foreign.R.UserAuthorities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorityID == foreign.AuthorityID {
				local.R.Authority = foreign
				if foreign.R == nil {
					foreign.R = &authorityR{}
				}
				foreign.R.UserAuthorities = append(foreign.R.UserAuthorities, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAuthorityL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAuthority interface{}, mods queries.Applicator) error {
	var slice []*UserAuthority
	var object *UserAuthority

	if singular {
		var ok bool
		object, ok = maybeUserAuthority.(*UserAuthority)
		if !ok {
			object = new(UserAuthority)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAuthority))
			}
		}
	} else {
		s, ok := maybeUserAuthority.(*[]*UserAuthority)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAuthority)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAuthority))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userAuthorityR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAuthorityR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserAuthorities = append(foreign.R.UserAuthorities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserAuthorities = append(foreign.R.UserAuthorities, local)
				break
			}
		}
	}

	return nil
}

// SetAuthority of the userAuthority to the related item.
// Sets o.R.Authority to related.
// Adds o to related.R.UserAuthorities.
func (o *UserAuthority) SetAuthority(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Authority) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_authority` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"authority_id"}),
		strmangle.WhereClause("`", "`", 0, userAuthorityPrimaryKeyColumns),
	)
	values := []interface{}{related.AuthorityID, o.UserID, o.AuthorityID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorityID = related.AuthorityID
	if o.R == nil {
		o.R = &userAuthorityR{
			Authority: related,
		}
	} else {
		o.R.Authority = related
	}

	if related.R == nil {
		related.R = &authorityR{
			UserAuthorities: UserAuthoritySlice{o},
		}
	} else {
		related.R.UserAuthorities = append(related.R.UserAuthorities, o)
	}

	return nil
}

// SetUser of the userAuthority to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAuthorities.
func (o *UserAuthority) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_authority` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userAuthorityPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.UserID, o.AuthorityID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &userAuthorityR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAuthorities: UserAuthoritySlice{o},
		}
	} else {
		related.R.UserAuthorities = append(related.R.UserAuthorities, o)
	}

	return nil
}

// UserAuthorities retrieves all the records using an executor.
func UserAuthorities(mods ...qm.QueryMod) userAuthorityQuery {
	mods = append(mods, qm.From("`user_authority`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_authority`.*"})
	}

	return userAuthorityQuery{q}
}

// FindUserAuthority retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAuthority(ctx context.Context, exec boil.ContextExecutor, userID int, authorityID int, selectCols ...string) (*UserAuthority, error) {
	userAuthorityObj := &UserAuthority{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_authority` where `user_id`=? AND `authority_id`=?", sel,
	)

	q := queries.Raw(query, userID, authorityID)

	err := q.Bind(ctx, exec, userAuthorityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_authority")
	}

	if err = userAuthorityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userAuthorityObj, err
	}

	return userAuthorityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAuthority) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_authority provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAuthorityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAuthorityInsertCacheMut.RLock()
	cache, cached := userAuthorityInsertCache[key]
	userAuthorityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAuthorityAllColumns,
			userAuthorityColumnsWithDefault,
			userAuthorityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAuthorityType, userAuthorityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAuthorityType, userAuthorityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_authority` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_authority` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_authority` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userAuthorityPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_authority")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.AuthorityID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_authority")
	}

CacheNoHooks:
	if !cached {
		userAuthorityInsertCacheMut.Lock()
		userAuthorityInsertCache[key] = cache
		userAuthorityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserAuthority.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAuthority) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAuthorityUpdateCacheMut.RLock()
	cache, cached := userAuthorityUpdateCache[key]
	userAuthorityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAuthorityAllColumns,
			userAuthorityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_authority, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_authority` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userAuthorityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAuthorityType, userAuthorityMapping, append(wl, userAuthorityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_authority row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_authority")
	}

	if !cached {
		userAuthorityUpdateCacheMut.Lock()
		userAuthorityUpdateCache[key] = cache
		userAuthorityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAuthorityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_authority")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAuthoritySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_authority` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAuthorityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userAuthority slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userAuthority")
	}
	return rowsAff, nil
}

var mySQLUserAuthorityUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAuthority) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_authority provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAuthorityColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserAuthorityUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAuthorityUpsertCacheMut.RLock()
	cache, cached := userAuthorityUpsertCache[key]
	userAuthorityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAuthorityAllColumns,
			userAuthorityColumnsWithDefault,
			userAuthorityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAuthorityAllColumns,
			userAuthorityPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_authority, could not build update column list")
		}

		ret := strmangle.SetComplement(userAuthorityAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_authority`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_authority` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userAuthorityType, userAuthorityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAuthorityType, userAuthorityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_authority")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userAuthorityType, userAuthorityMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_authority")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_authority")
	}

CacheNoHooks:
	if !cached {
		userAuthorityUpsertCacheMut.Lock()
		userAuthorityUpsertCache[key] = cache
		userAuthorityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserAuthority record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAuthority) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserAuthority provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAuthorityPrimaryKeyMapping)
	sql := "DELETE FROM `user_authority` WHERE `user_id`=? AND `authority_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_authority")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAuthorityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userAuthorityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_authority")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_authority")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAuthoritySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAuthorityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_authority` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAuthorityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userAuthority slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_authority")
	}

	if len(userAuthorityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAuthority) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAuthority(ctx, exec, o.UserID, o.AuthorityID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAuthoritySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAuthoritySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAuthorityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_authority`.* FROM `user_authority` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAuthorityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserAuthoritySlice")
	}

	*o = slice

	return nil
}

// UserAuthorityExists checks if the UserAuthority row exists.
func UserAuthorityExists(ctx context.Context, exec boil.ContextExecutor, userID int, authorityID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_authority` where `user_id`=? AND `authority_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, authorityID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, authorityID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_authority exists")
	}

	return exists, nil
}

// Exists checks if the UserAuthority row exists.
func (o *UserAuthority) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserAuthorityExists(ctx, exec, o.UserID, o.AuthorityID)
}
