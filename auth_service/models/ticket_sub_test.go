// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTicketSubs(t *testing.T) {
	t.Parallel()

	query := TicketSubs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketSubsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketSubsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TicketSubs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketSubsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketSubSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketSubsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketSubExists(ctx, tx, o.TicketID, o.UsedBy)
	if err != nil {
		t.Errorf("Unable to check if TicketSub exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketSubExists to return true, but got false.")
	}
}

func testTicketSubsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketSubFound, err := FindTicketSub(ctx, tx, o.TicketID, o.UsedBy)
	if err != nil {
		t.Error(err)
	}

	if ticketSubFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketSubsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TicketSubs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketSubsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TicketSubs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketSubsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketSubOne := &TicketSub{}
	ticketSubTwo := &TicketSub{}
	if err = randomize.Struct(seed, ticketSubOne, ticketSubDBTypes, false, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketSubTwo, ticketSubDBTypes, false, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketSubOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketSubTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketSubs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketSubsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketSubOne := &TicketSub{}
	ticketSubTwo := &TicketSub{}
	if err = randomize.Struct(seed, ticketSubOne, ticketSubDBTypes, false, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketSubTwo, ticketSubDBTypes, false, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketSubOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketSubTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketSubBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func ticketSubAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketSub) error {
	*o = TicketSub{}
	return nil
}

func testTicketSubsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TicketSub{}
	o := &TicketSub{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketSubDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketSub object: %s", err)
	}

	AddTicketSubHook(boil.BeforeInsertHook, ticketSubBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketSubBeforeInsertHooks = []TicketSubHook{}

	AddTicketSubHook(boil.AfterInsertHook, ticketSubAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketSubAfterInsertHooks = []TicketSubHook{}

	AddTicketSubHook(boil.AfterSelectHook, ticketSubAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketSubAfterSelectHooks = []TicketSubHook{}

	AddTicketSubHook(boil.BeforeUpdateHook, ticketSubBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketSubBeforeUpdateHooks = []TicketSubHook{}

	AddTicketSubHook(boil.AfterUpdateHook, ticketSubAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketSubAfterUpdateHooks = []TicketSubHook{}

	AddTicketSubHook(boil.BeforeDeleteHook, ticketSubBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketSubBeforeDeleteHooks = []TicketSubHook{}

	AddTicketSubHook(boil.AfterDeleteHook, ticketSubAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketSubAfterDeleteHooks = []TicketSubHook{}

	AddTicketSubHook(boil.BeforeUpsertHook, ticketSubBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketSubBeforeUpsertHooks = []TicketSubHook{}

	AddTicketSubHook(boil.AfterUpsertHook, ticketSubAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketSubAfterUpsertHooks = []TicketSubHook{}
}

func testTicketSubsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketSubsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ticketSubColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketSubToOneTicketUsingTicket(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TicketSub
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketSubDBTypes, false, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TicketID = foreign.TicketID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TicketID != foreign.TicketID {
		t.Errorf("want: %v, got %v", foreign.TicketID, check.TicketID)
	}

	ranAfterSelectHook := false
	AddTicketHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TicketSubSlice{&local}
	if err = local.L.LoadTicket(ctx, tx, false, (*[]*TicketSub)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTicketSubToOneUserUsingUsedByUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TicketSub
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketSubDBTypes, false, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UsedBy = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UsedByUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TicketSubSlice{&local}
	if err = local.L.LoadUsedByUser(ctx, tx, false, (*[]*TicketSub)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UsedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UsedByUser = nil
	if err = local.L.LoadUsedByUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UsedByUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTicketSubToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TicketSub
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketSubDBTypes, false, strmangle.SetComplement(ticketSubPrimaryKeyColumns, ticketSubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketSubs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TicketID != x.TicketID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		if exists, err := TicketSubExists(ctx, tx, a.TicketID, a.UsedBy); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTicketSubToOneSetOpUserUsingUsedByUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TicketSub
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketSubDBTypes, false, strmangle.SetComplement(ticketSubPrimaryKeyColumns, ticketSubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUsedByUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UsedByUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsedByTicketSubs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UsedBy != x.UserID {
			t.Error("foreign key was wrong value", a.UsedBy)
		}

		if exists, err := TicketSubExists(ctx, tx, a.TicketID, a.UsedBy); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTicketSubsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketSubsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketSubSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketSubsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketSubs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketSubDBTypes = map[string]string{`TicketID`: `int`, `UsedBy`: `int`, `UsedDate`: `datetime`}
	_                = bytes.MinRead
)

func testTicketSubsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketSubPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketSubAllColumns) == len(ticketSubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketSubsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketSubAllColumns) == len(ticketSubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketSub{}
	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketSubDBTypes, true, ticketSubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketSubAllColumns, ticketSubPrimaryKeyColumns) {
		fields = ticketSubAllColumns
	} else {
		fields = strmangle.SetComplement(
			ticketSubAllColumns,
			ticketSubPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketSubSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketSubsUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketSubAllColumns) == len(ticketSubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTicketSubUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TicketSub{}
	if err = randomize.Struct(seed, &o, ticketSubDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketSub: %s", err)
	}

	count, err := TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketSubDBTypes, false, ticketSubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketSub struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketSub: %s", err)
	}

	count, err = TicketSubs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
