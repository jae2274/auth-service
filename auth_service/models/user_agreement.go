// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAgreement is an object representing the database table.
type UserAgreement struct {
	UserID      int  `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AgreementID int  `boil:"agreement_id" json:"agreement_id" toml:"agreement_id" yaml:"agreement_id"`
	IsAgree     int8 `boil:"is_agree" json:"is_agree" toml:"is_agree" yaml:"is_agree"`

	R *userAgreementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAgreementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAgreementColumns = struct {
	UserID      string
	AgreementID string
	IsAgree     string
}{
	UserID:      "user_id",
	AgreementID: "agreement_id",
	IsAgree:     "is_agree",
}

var UserAgreementTableColumns = struct {
	UserID      string
	AgreementID string
	IsAgree     string
}{
	UserID:      "user_agreement.user_id",
	AgreementID: "user_agreement.agreement_id",
	IsAgree:     "user_agreement.is_agree",
}

// Generated where

var UserAgreementWhere = struct {
	UserID      whereHelperint
	AgreementID whereHelperint
	IsAgree     whereHelperint8
}{
	UserID:      whereHelperint{field: "`user_agreement`.`user_id`"},
	AgreementID: whereHelperint{field: "`user_agreement`.`agreement_id`"},
	IsAgree:     whereHelperint8{field: "`user_agreement`.`is_agree`"},
}

// UserAgreementRels is where relationship names are stored.
var UserAgreementRels = struct {
	Agreement string
	User      string
}{
	Agreement: "Agreement",
	User:      "User",
}

// userAgreementR is where relationships are stored.
type userAgreementR struct {
	Agreement *Agreement `boil:"Agreement" json:"Agreement" toml:"Agreement" yaml:"Agreement"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userAgreementR) NewStruct() *userAgreementR {
	return &userAgreementR{}
}

func (r *userAgreementR) GetAgreement() *Agreement {
	if r == nil {
		return nil
	}
	return r.Agreement
}

func (r *userAgreementR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userAgreementL is where Load methods for each relationship are stored.
type userAgreementL struct{}

var (
	userAgreementAllColumns            = []string{"user_id", "agreement_id", "is_agree"}
	userAgreementColumnsWithoutDefault = []string{"user_id", "agreement_id", "is_agree"}
	userAgreementColumnsWithDefault    = []string{}
	userAgreementPrimaryKeyColumns     = []string{"user_id", "agreement_id"}
	userAgreementGeneratedColumns      = []string{}
)

type (
	// UserAgreementSlice is an alias for a slice of pointers to UserAgreement.
	// This should almost always be used instead of []UserAgreement.
	UserAgreementSlice []*UserAgreement
	// UserAgreementHook is the signature for custom UserAgreement hook methods
	UserAgreementHook func(context.Context, boil.ContextExecutor, *UserAgreement) error

	userAgreementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAgreementType                 = reflect.TypeOf(&UserAgreement{})
	userAgreementMapping              = queries.MakeStructMapping(userAgreementType)
	userAgreementPrimaryKeyMapping, _ = queries.BindMapping(userAgreementType, userAgreementMapping, userAgreementPrimaryKeyColumns)
	userAgreementInsertCacheMut       sync.RWMutex
	userAgreementInsertCache          = make(map[string]insertCache)
	userAgreementUpdateCacheMut       sync.RWMutex
	userAgreementUpdateCache          = make(map[string]updateCache)
	userAgreementUpsertCacheMut       sync.RWMutex
	userAgreementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAgreementAfterSelectMu sync.Mutex
var userAgreementAfterSelectHooks []UserAgreementHook

var userAgreementBeforeInsertMu sync.Mutex
var userAgreementBeforeInsertHooks []UserAgreementHook
var userAgreementAfterInsertMu sync.Mutex
var userAgreementAfterInsertHooks []UserAgreementHook

var userAgreementBeforeUpdateMu sync.Mutex
var userAgreementBeforeUpdateHooks []UserAgreementHook
var userAgreementAfterUpdateMu sync.Mutex
var userAgreementAfterUpdateHooks []UserAgreementHook

var userAgreementBeforeDeleteMu sync.Mutex
var userAgreementBeforeDeleteHooks []UserAgreementHook
var userAgreementAfterDeleteMu sync.Mutex
var userAgreementAfterDeleteHooks []UserAgreementHook

var userAgreementBeforeUpsertMu sync.Mutex
var userAgreementBeforeUpsertHooks []UserAgreementHook
var userAgreementAfterUpsertMu sync.Mutex
var userAgreementAfterUpsertHooks []UserAgreementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAgreement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAgreement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAgreement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAgreement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAgreement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAgreement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAgreement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAgreement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAgreement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAgreementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAgreementHook registers your hook function for all future operations.
func AddUserAgreementHook(hookPoint boil.HookPoint, userAgreementHook UserAgreementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAgreementAfterSelectMu.Lock()
		userAgreementAfterSelectHooks = append(userAgreementAfterSelectHooks, userAgreementHook)
		userAgreementAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userAgreementBeforeInsertMu.Lock()
		userAgreementBeforeInsertHooks = append(userAgreementBeforeInsertHooks, userAgreementHook)
		userAgreementBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userAgreementAfterInsertMu.Lock()
		userAgreementAfterInsertHooks = append(userAgreementAfterInsertHooks, userAgreementHook)
		userAgreementAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userAgreementBeforeUpdateMu.Lock()
		userAgreementBeforeUpdateHooks = append(userAgreementBeforeUpdateHooks, userAgreementHook)
		userAgreementBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userAgreementAfterUpdateMu.Lock()
		userAgreementAfterUpdateHooks = append(userAgreementAfterUpdateHooks, userAgreementHook)
		userAgreementAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userAgreementBeforeDeleteMu.Lock()
		userAgreementBeforeDeleteHooks = append(userAgreementBeforeDeleteHooks, userAgreementHook)
		userAgreementBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userAgreementAfterDeleteMu.Lock()
		userAgreementAfterDeleteHooks = append(userAgreementAfterDeleteHooks, userAgreementHook)
		userAgreementAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userAgreementBeforeUpsertMu.Lock()
		userAgreementBeforeUpsertHooks = append(userAgreementBeforeUpsertHooks, userAgreementHook)
		userAgreementBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userAgreementAfterUpsertMu.Lock()
		userAgreementAfterUpsertHooks = append(userAgreementAfterUpsertHooks, userAgreementHook)
		userAgreementAfterUpsertMu.Unlock()
	}
}

// One returns a single userAgreement record from the query.
func (q userAgreementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAgreement, error) {
	o := &UserAgreement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_agreement")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAgreement records from the query.
func (q userAgreementQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAgreementSlice, error) {
	var o []*UserAgreement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserAgreement slice")
	}

	if len(userAgreementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAgreement records in the query.
func (q userAgreementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_agreement rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAgreementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_agreement exists")
	}

	return count > 0, nil
}

// Agreement pointed to by the foreign key.
func (o *UserAgreement) Agreement(mods ...qm.QueryMod) agreementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`agreement_id` = ?", o.AgreementID),
	}

	queryMods = append(queryMods, mods...)

	return Agreements(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserAgreement) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`user_id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadAgreement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAgreementL) LoadAgreement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAgreement interface{}, mods queries.Applicator) error {
	var slice []*UserAgreement
	var object *UserAgreement

	if singular {
		var ok bool
		object, ok = maybeUserAgreement.(*UserAgreement)
		if !ok {
			object = new(UserAgreement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAgreement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAgreement))
			}
		}
	} else {
		s, ok := maybeUserAgreement.(*[]*UserAgreement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAgreement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAgreement))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userAgreementR{}
		}
		args[object.AgreementID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAgreementR{}
			}

			args[obj.AgreementID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`agreement`),
		qm.WhereIn(`agreement.agreement_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agreement")
	}

	var resultSlice []*Agreement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agreement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agreement")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agreement")
	}

	if len(agreementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agreement = foreign
		if foreign.R == nil {
			foreign.R = &agreementR{}
		}
		foreign.R.UserAgreements = append(foreign.R.UserAgreements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgreementID == foreign.AgreementID {
				local.R.Agreement = foreign
				if foreign.R == nil {
					foreign.R = &agreementR{}
				}
				foreign.R.UserAgreements = append(foreign.R.UserAgreements, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAgreementL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAgreement interface{}, mods queries.Applicator) error {
	var slice []*UserAgreement
	var object *UserAgreement

	if singular {
		var ok bool
		object, ok = maybeUserAgreement.(*UserAgreement)
		if !ok {
			object = new(UserAgreement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAgreement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAgreement))
			}
		}
	} else {
		s, ok := maybeUserAgreement.(*[]*UserAgreement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAgreement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAgreement))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userAgreementR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAgreementR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserAgreements = append(foreign.R.UserAgreements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserAgreements = append(foreign.R.UserAgreements, local)
				break
			}
		}
	}

	return nil
}

// SetAgreement of the userAgreement to the related item.
// Sets o.R.Agreement to related.
// Adds o to related.R.UserAgreements.
func (o *UserAgreement) SetAgreement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Agreement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_agreement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"agreement_id"}),
		strmangle.WhereClause("`", "`", 0, userAgreementPrimaryKeyColumns),
	)
	values := []interface{}{related.AgreementID, o.UserID, o.AgreementID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgreementID = related.AgreementID
	if o.R == nil {
		o.R = &userAgreementR{
			Agreement: related,
		}
	} else {
		o.R.Agreement = related
	}

	if related.R == nil {
		related.R = &agreementR{
			UserAgreements: UserAgreementSlice{o},
		}
	} else {
		related.R.UserAgreements = append(related.R.UserAgreements, o)
	}

	return nil
}

// SetUser of the userAgreement to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAgreements.
func (o *UserAgreement) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_agreement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userAgreementPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.UserID, o.AgreementID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &userAgreementR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAgreements: UserAgreementSlice{o},
		}
	} else {
		related.R.UserAgreements = append(related.R.UserAgreements, o)
	}

	return nil
}

// UserAgreements retrieves all the records using an executor.
func UserAgreements(mods ...qm.QueryMod) userAgreementQuery {
	mods = append(mods, qm.From("`user_agreement`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_agreement`.*"})
	}

	return userAgreementQuery{q}
}

// FindUserAgreement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAgreement(ctx context.Context, exec boil.ContextExecutor, userID int, agreementID int, selectCols ...string) (*UserAgreement, error) {
	userAgreementObj := &UserAgreement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_agreement` where `user_id`=? AND `agreement_id`=?", sel,
	)

	q := queries.Raw(query, userID, agreementID)

	err := q.Bind(ctx, exec, userAgreementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_agreement")
	}

	if err = userAgreementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userAgreementObj, err
	}

	return userAgreementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAgreement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_agreement provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAgreementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAgreementInsertCacheMut.RLock()
	cache, cached := userAgreementInsertCache[key]
	userAgreementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAgreementAllColumns,
			userAgreementColumnsWithDefault,
			userAgreementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAgreementType, userAgreementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAgreementType, userAgreementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_agreement` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_agreement` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_agreement` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userAgreementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_agreement")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.AgreementID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_agreement")
	}

CacheNoHooks:
	if !cached {
		userAgreementInsertCacheMut.Lock()
		userAgreementInsertCache[key] = cache
		userAgreementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserAgreement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAgreement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAgreementUpdateCacheMut.RLock()
	cache, cached := userAgreementUpdateCache[key]
	userAgreementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAgreementAllColumns,
			userAgreementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_agreement, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_agreement` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userAgreementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAgreementType, userAgreementMapping, append(wl, userAgreementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_agreement row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_agreement")
	}

	if !cached {
		userAgreementUpdateCacheMut.Lock()
		userAgreementUpdateCache[key] = cache
		userAgreementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAgreementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_agreement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_agreement")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAgreementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAgreementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_agreement` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAgreementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userAgreement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userAgreement")
	}
	return rowsAff, nil
}

var mySQLUserAgreementUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAgreement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_agreement provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAgreementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserAgreementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAgreementUpsertCacheMut.RLock()
	cache, cached := userAgreementUpsertCache[key]
	userAgreementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAgreementAllColumns,
			userAgreementColumnsWithDefault,
			userAgreementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAgreementAllColumns,
			userAgreementPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_agreement, could not build update column list")
		}

		ret := strmangle.SetComplement(userAgreementAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user_agreement`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_agreement` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userAgreementType, userAgreementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAgreementType, userAgreementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_agreement")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userAgreementType, userAgreementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_agreement")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_agreement")
	}

CacheNoHooks:
	if !cached {
		userAgreementUpsertCacheMut.Lock()
		userAgreementUpsertCache[key] = cache
		userAgreementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserAgreement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAgreement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserAgreement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAgreementPrimaryKeyMapping)
	sql := "DELETE FROM `user_agreement` WHERE `user_id`=? AND `agreement_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_agreement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_agreement")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAgreementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userAgreementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_agreement")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_agreement")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAgreementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAgreementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAgreementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_agreement` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAgreementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userAgreement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_agreement")
	}

	if len(userAgreementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAgreement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAgreement(ctx, exec, o.UserID, o.AgreementID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAgreementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAgreementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAgreementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_agreement`.* FROM `user_agreement` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userAgreementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserAgreementSlice")
	}

	*o = slice

	return nil
}

// UserAgreementExists checks if the UserAgreement row exists.
func UserAgreementExists(ctx context.Context, exec boil.ContextExecutor, userID int, agreementID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_agreement` where `user_id`=? AND `agreement_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, agreementID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, agreementID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_agreement exists")
	}

	return exists, nil
}

// Exists checks if the UserAgreement row exists.
func (o *UserAgreement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserAgreementExists(ctx, exec, o.UserID, o.AgreementID)
}
