// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserAuthorities(t *testing.T) {
	t.Parallel()

	query := UserAuthorities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserAuthoritiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAuthoritiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserAuthorities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAuthoritiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAuthoritySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAuthoritiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserAuthorityExists(ctx, tx, o.UserID, o.AuthorityID)
	if err != nil {
		t.Errorf("Unable to check if UserAuthority exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAuthorityExists to return true, but got false.")
	}
}

func testUserAuthoritiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userAuthorityFound, err := FindUserAuthority(ctx, tx, o.UserID, o.AuthorityID)
	if err != nil {
		t.Error(err)
	}

	if userAuthorityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserAuthoritiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserAuthorities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserAuthoritiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserAuthorities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAuthoritiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAuthorityOne := &UserAuthority{}
	userAuthorityTwo := &UserAuthority{}
	if err = randomize.Struct(seed, userAuthorityOne, userAuthorityDBTypes, false, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}
	if err = randomize.Struct(seed, userAuthorityTwo, userAuthorityDBTypes, false, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAuthorityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAuthorityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAuthorities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAuthoritiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAuthorityOne := &UserAuthority{}
	userAuthorityTwo := &UserAuthority{}
	if err = randomize.Struct(seed, userAuthorityOne, userAuthorityDBTypes, false, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}
	if err = randomize.Struct(seed, userAuthorityTwo, userAuthorityDBTypes, false, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAuthorityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAuthorityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userAuthorityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func userAuthorityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAuthority) error {
	*o = UserAuthority{}
	return nil
}

func testUserAuthoritiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserAuthority{}
	o := &UserAuthority{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAuthority object: %s", err)
	}

	AddUserAuthorityHook(boil.BeforeInsertHook, userAuthorityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAuthorityBeforeInsertHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.AfterInsertHook, userAuthorityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAuthorityAfterInsertHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.AfterSelectHook, userAuthorityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAuthorityAfterSelectHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.BeforeUpdateHook, userAuthorityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAuthorityBeforeUpdateHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.AfterUpdateHook, userAuthorityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAuthorityAfterUpdateHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.BeforeDeleteHook, userAuthorityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAuthorityBeforeDeleteHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.AfterDeleteHook, userAuthorityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAuthorityAfterDeleteHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.BeforeUpsertHook, userAuthorityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAuthorityBeforeUpsertHooks = []UserAuthorityHook{}

	AddUserAuthorityHook(boil.AfterUpsertHook, userAuthorityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAuthorityAfterUpsertHooks = []UserAuthorityHook{}
}

func testUserAuthoritiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAuthoritiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userAuthorityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAuthorityToOneAuthorityUsingAuthority(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAuthority
	var foreign Authority

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAuthorityDBTypes, false, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authorityDBTypes, false, authorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Authority struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AuthorityID = foreign.AuthorityID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Authority().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AuthorityID != foreign.AuthorityID {
		t.Errorf("want: %v, got %v", foreign.AuthorityID, check.AuthorityID)
	}

	ranAfterSelectHook := false
	AddAuthorityHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Authority) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserAuthoritySlice{&local}
	if err = local.L.LoadAuthority(ctx, tx, false, (*[]*UserAuthority)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Authority = nil
	if err = local.L.LoadAuthority(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Authority == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserAuthorityToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAuthority
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAuthorityDBTypes, false, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserAuthoritySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserAuthority)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserAuthorityToOneSetOpAuthorityUsingAuthority(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAuthority
	var b, c Authority

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAuthorityDBTypes, false, strmangle.SetComplement(userAuthorityPrimaryKeyColumns, userAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authorityDBTypes, false, strmangle.SetComplement(authorityPrimaryKeyColumns, authorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorityDBTypes, false, strmangle.SetComplement(authorityPrimaryKeyColumns, authorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Authority{&b, &c} {
		err = a.SetAuthority(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Authority != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAuthorities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AuthorityID != x.AuthorityID {
			t.Error("foreign key was wrong value", a.AuthorityID)
		}

		if exists, err := UserAuthorityExists(ctx, tx, a.UserID, a.AuthorityID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserAuthorityToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAuthority
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAuthorityDBTypes, false, strmangle.SetComplement(userAuthorityPrimaryKeyColumns, userAuthorityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAuthorities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserAuthorityExists(ctx, tx, a.UserID, a.AuthorityID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserAuthoritiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAuthoritiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAuthoritySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAuthoritiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAuthorities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAuthorityDBTypes = map[string]string{`UserID`: `int`, `AuthorityID`: `int`, `ExpiryDate`: `datetime`, `CreatedDate`: `timestamp`, `UpdatedDate`: `timestamp`}
	_                    = bytes.MinRead
)

func testUserAuthoritiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAuthorityAllColumns) == len(userAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserAuthoritiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAuthorityAllColumns) == len(userAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAuthority{}
	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAuthorityDBTypes, true, userAuthorityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAuthorityAllColumns, userAuthorityPrimaryKeyColumns) {
		fields = userAuthorityAllColumns
	} else {
		fields = strmangle.SetComplement(
			userAuthorityAllColumns,
			userAuthorityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserAuthoritySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserAuthoritiesUpsert(t *testing.T) {
	t.Parallel()

	if len(userAuthorityAllColumns) == len(userAuthorityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserAuthorityUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserAuthority{}
	if err = randomize.Struct(seed, &o, userAuthorityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAuthority: %s", err)
	}

	count, err := UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userAuthorityDBTypes, false, userAuthorityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAuthority struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAuthority: %s", err)
	}

	count, err = UserAuthorities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
