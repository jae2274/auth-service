// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthServer is an object representing the database table.
type AuthServer struct {
	AuthServerID   int    `boil:"auth_server_id" json:"auth_server_id" toml:"auth_server_id" yaml:"auth_server_id"`
	AuthServerName string `boil:"auth_server_name" json:"auth_server_name" toml:"auth_server_name" yaml:"auth_server_name"`

	R *authServerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authServerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthServerColumns = struct {
	AuthServerID   string
	AuthServerName string
}{
	AuthServerID:   "auth_server_id",
	AuthServerName: "auth_server_name",
}

var AuthServerTableColumns = struct {
	AuthServerID   string
	AuthServerName string
}{
	AuthServerID:   "auth_server.auth_server_id",
	AuthServerName: "auth_server.auth_server_name",
}

// Generated where

var AuthServerWhere = struct {
	AuthServerID   whereHelperint
	AuthServerName whereHelperstring
}{
	AuthServerID:   whereHelperint{field: "`auth_server`.`auth_server_id`"},
	AuthServerName: whereHelperstring{field: "`auth_server`.`auth_server_name`"},
}

// AuthServerRels is where relationship names are stored.
var AuthServerRels = struct {
}{}

// authServerR is where relationships are stored.
type authServerR struct {
}

// NewStruct creates a new relationship struct
func (*authServerR) NewStruct() *authServerR {
	return &authServerR{}
}

// authServerL is where Load methods for each relationship are stored.
type authServerL struct{}

var (
	authServerAllColumns            = []string{"auth_server_id", "auth_server_name"}
	authServerColumnsWithoutDefault = []string{"auth_server_id", "auth_server_name"}
	authServerColumnsWithDefault    = []string{}
	authServerPrimaryKeyColumns     = []string{"auth_server_id"}
	authServerGeneratedColumns      = []string{}
)

type (
	// AuthServerSlice is an alias for a slice of pointers to AuthServer.
	// This should almost always be used instead of []AuthServer.
	AuthServerSlice []*AuthServer
	// AuthServerHook is the signature for custom AuthServer hook methods
	AuthServerHook func(context.Context, boil.ContextExecutor, *AuthServer) error

	authServerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authServerType                 = reflect.TypeOf(&AuthServer{})
	authServerMapping              = queries.MakeStructMapping(authServerType)
	authServerPrimaryKeyMapping, _ = queries.BindMapping(authServerType, authServerMapping, authServerPrimaryKeyColumns)
	authServerInsertCacheMut       sync.RWMutex
	authServerInsertCache          = make(map[string]insertCache)
	authServerUpdateCacheMut       sync.RWMutex
	authServerUpdateCache          = make(map[string]updateCache)
	authServerUpsertCacheMut       sync.RWMutex
	authServerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authServerAfterSelectMu sync.Mutex
var authServerAfterSelectHooks []AuthServerHook

var authServerBeforeInsertMu sync.Mutex
var authServerBeforeInsertHooks []AuthServerHook
var authServerAfterInsertMu sync.Mutex
var authServerAfterInsertHooks []AuthServerHook

var authServerBeforeUpdateMu sync.Mutex
var authServerBeforeUpdateHooks []AuthServerHook
var authServerAfterUpdateMu sync.Mutex
var authServerAfterUpdateHooks []AuthServerHook

var authServerBeforeDeleteMu sync.Mutex
var authServerBeforeDeleteHooks []AuthServerHook
var authServerAfterDeleteMu sync.Mutex
var authServerAfterDeleteHooks []AuthServerHook

var authServerBeforeUpsertMu sync.Mutex
var authServerBeforeUpsertHooks []AuthServerHook
var authServerAfterUpsertMu sync.Mutex
var authServerAfterUpsertHooks []AuthServerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthServer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthServer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthServer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthServer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthServer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthServer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthServer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthServer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthServer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authServerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthServerHook registers your hook function for all future operations.
func AddAuthServerHook(hookPoint boil.HookPoint, authServerHook AuthServerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		authServerAfterSelectMu.Lock()
		authServerAfterSelectHooks = append(authServerAfterSelectHooks, authServerHook)
		authServerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		authServerBeforeInsertMu.Lock()
		authServerBeforeInsertHooks = append(authServerBeforeInsertHooks, authServerHook)
		authServerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		authServerAfterInsertMu.Lock()
		authServerAfterInsertHooks = append(authServerAfterInsertHooks, authServerHook)
		authServerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		authServerBeforeUpdateMu.Lock()
		authServerBeforeUpdateHooks = append(authServerBeforeUpdateHooks, authServerHook)
		authServerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		authServerAfterUpdateMu.Lock()
		authServerAfterUpdateHooks = append(authServerAfterUpdateHooks, authServerHook)
		authServerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		authServerBeforeDeleteMu.Lock()
		authServerBeforeDeleteHooks = append(authServerBeforeDeleteHooks, authServerHook)
		authServerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		authServerAfterDeleteMu.Lock()
		authServerAfterDeleteHooks = append(authServerAfterDeleteHooks, authServerHook)
		authServerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		authServerBeforeUpsertMu.Lock()
		authServerBeforeUpsertHooks = append(authServerBeforeUpsertHooks, authServerHook)
		authServerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		authServerAfterUpsertMu.Lock()
		authServerAfterUpsertHooks = append(authServerAfterUpsertHooks, authServerHook)
		authServerAfterUpsertMu.Unlock()
	}
}

// One returns a single authServer record from the query.
func (q authServerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthServer, error) {
	o := &AuthServer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_server")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuthServer records from the query.
func (q authServerQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthServerSlice, error) {
	var o []*AuthServer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthServer slice")
	}

	if len(authServerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuthServer records in the query.
func (q authServerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_server rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authServerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_server exists")
	}

	return count > 0, nil
}

// AuthServers retrieves all the records using an executor.
func AuthServers(mods ...qm.QueryMod) authServerQuery {
	mods = append(mods, qm.From("`auth_server`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`auth_server`.*"})
	}

	return authServerQuery{q}
}

// FindAuthServer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthServer(ctx context.Context, exec boil.ContextExecutor, authServerID int, selectCols ...string) (*AuthServer, error) {
	authServerObj := &AuthServer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auth_server` where `auth_server_id`=?", sel,
	)

	q := queries.Raw(query, authServerID)

	err := q.Bind(ctx, exec, authServerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_server")
	}

	if err = authServerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return authServerObj, err
	}

	return authServerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthServer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_server provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authServerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authServerInsertCacheMut.RLock()
	cache, cached := authServerInsertCache[key]
	authServerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authServerAllColumns,
			authServerColumnsWithDefault,
			authServerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authServerType, authServerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authServerType, authServerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `auth_server` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `auth_server` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auth_server` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, authServerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_server")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AuthServerID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_server")
	}

CacheNoHooks:
	if !cached {
		authServerInsertCacheMut.Lock()
		authServerInsertCache[key] = cache
		authServerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuthServer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthServer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authServerUpdateCacheMut.RLock()
	cache, cached := authServerUpdateCache[key]
	authServerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authServerAllColumns,
			authServerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_server, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auth_server` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, authServerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authServerType, authServerMapping, append(wl, authServerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_server row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_server")
	}

	if !cached {
		authServerUpdateCacheMut.Lock()
		authServerUpdateCache[key] = cache
		authServerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authServerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_server")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthServerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `auth_server` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authServerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authServer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authServer")
	}
	return rowsAff, nil
}

var mySQLAuthServerUniqueColumns = []string{
	"auth_server_id",
	"auth_server_name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthServer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_server provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authServerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuthServerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authServerUpsertCacheMut.RLock()
	cache, cached := authServerUpsertCache[key]
	authServerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			authServerAllColumns,
			authServerColumnsWithDefault,
			authServerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			authServerAllColumns,
			authServerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert auth_server, could not build update column list")
		}

		ret := strmangle.SetComplement(authServerAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`auth_server`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auth_server` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(authServerType, authServerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authServerType, authServerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auth_server")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(authServerType, authServerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for auth_server")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auth_server")
	}

CacheNoHooks:
	if !cached {
		authServerUpsertCacheMut.Lock()
		authServerUpsertCache[key] = cache
		authServerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AuthServer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthServer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthServer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authServerPrimaryKeyMapping)
	sql := "DELETE FROM `auth_server` WHERE `auth_server_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_server")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authServerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authServerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_server")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthServerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authServerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `auth_server` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authServerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authServer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_server")
	}

	if len(authServerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthServer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthServer(ctx, exec, o.AuthServerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthServerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthServerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `auth_server`.* FROM `auth_server` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, authServerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthServerSlice")
	}

	*o = slice

	return nil
}

// AuthServerExists checks if the AuthServer row exists.
func AuthServerExists(ctx context.Context, exec boil.ContextExecutor, authServerID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `auth_server` where `auth_server_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, authServerID)
	}
	row := exec.QueryRowContext(ctx, sql, authServerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_server exists")
	}

	return exists, nil
}

// Exists checks if the AuthServer row exists.
func (o *AuthServer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuthServerExists(ctx, exec, o.AuthServerID)
}
