// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserAgreements(t *testing.T) {
	t.Parallel()

	query := UserAgreements()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserAgreementsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAgreementsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserAgreements().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAgreementsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAgreementSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAgreementsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserAgreementExists(ctx, tx, o.UserID, o.AgreementID)
	if err != nil {
		t.Errorf("Unable to check if UserAgreement exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAgreementExists to return true, but got false.")
	}
}

func testUserAgreementsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userAgreementFound, err := FindUserAgreement(ctx, tx, o.UserID, o.AgreementID)
	if err != nil {
		t.Error(err)
	}

	if userAgreementFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserAgreementsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserAgreements().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserAgreementsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserAgreements().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAgreementsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAgreementOne := &UserAgreement{}
	userAgreementTwo := &UserAgreement{}
	if err = randomize.Struct(seed, userAgreementOne, userAgreementDBTypes, false, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}
	if err = randomize.Struct(seed, userAgreementTwo, userAgreementDBTypes, false, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAgreementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAgreementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAgreements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAgreementsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAgreementOne := &UserAgreement{}
	userAgreementTwo := &UserAgreement{}
	if err = randomize.Struct(seed, userAgreementOne, userAgreementDBTypes, false, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}
	if err = randomize.Struct(seed, userAgreementTwo, userAgreementDBTypes, false, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAgreementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAgreementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userAgreementBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func userAgreementAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAgreement) error {
	*o = UserAgreement{}
	return nil
}

func testUserAgreementsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserAgreement{}
	o := &UserAgreement{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAgreementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAgreement object: %s", err)
	}

	AddUserAgreementHook(boil.BeforeInsertHook, userAgreementBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAgreementBeforeInsertHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.AfterInsertHook, userAgreementAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAgreementAfterInsertHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.AfterSelectHook, userAgreementAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAgreementAfterSelectHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.BeforeUpdateHook, userAgreementBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAgreementBeforeUpdateHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.AfterUpdateHook, userAgreementAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAgreementAfterUpdateHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.BeforeDeleteHook, userAgreementBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAgreementBeforeDeleteHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.AfterDeleteHook, userAgreementAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAgreementAfterDeleteHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.BeforeUpsertHook, userAgreementBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAgreementBeforeUpsertHooks = []UserAgreementHook{}

	AddUserAgreementHook(boil.AfterUpsertHook, userAgreementAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAgreementAfterUpsertHooks = []UserAgreementHook{}
}

func testUserAgreementsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAgreementsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userAgreementColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAgreementToOneAgreementUsingAgreement(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAgreement
	var foreign Agreement

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAgreementDBTypes, false, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, agreementDBTypes, false, agreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Agreement struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AgreementID = foreign.AgreementID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Agreement().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AgreementID != foreign.AgreementID {
		t.Errorf("want: %v, got %v", foreign.AgreementID, check.AgreementID)
	}

	ranAfterSelectHook := false
	AddAgreementHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Agreement) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserAgreementSlice{&local}
	if err = local.L.LoadAgreement(ctx, tx, false, (*[]*UserAgreement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Agreement == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Agreement = nil
	if err = local.L.LoadAgreement(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Agreement == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserAgreementToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserAgreement
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAgreementDBTypes, false, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserAgreementSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserAgreement)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserAgreementToOneSetOpAgreementUsingAgreement(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAgreement
	var b, c Agreement

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAgreementDBTypes, false, strmangle.SetComplement(userAgreementPrimaryKeyColumns, userAgreementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agreementDBTypes, false, strmangle.SetComplement(agreementPrimaryKeyColumns, agreementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, agreementDBTypes, false, strmangle.SetComplement(agreementPrimaryKeyColumns, agreementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Agreement{&b, &c} {
		err = a.SetAgreement(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Agreement != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAgreements[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AgreementID != x.AgreementID {
			t.Error("foreign key was wrong value", a.AgreementID)
		}

		if exists, err := UserAgreementExists(ctx, tx, a.UserID, a.AgreementID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserAgreementToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAgreement
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAgreementDBTypes, false, strmangle.SetComplement(userAgreementPrimaryKeyColumns, userAgreementColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAgreements[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserAgreementExists(ctx, tx, a.UserID, a.AgreementID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserAgreementsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAgreementsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAgreementSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAgreementsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAgreements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAgreementDBTypes = map[string]string{`UserID`: `int`, `AgreementID`: `int`, `IsAgree`: `tinyint`}
	_                    = bytes.MinRead
)

func testUserAgreementsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userAgreementPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAgreementAllColumns) == len(userAgreementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserAgreementsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAgreementAllColumns) == len(userAgreementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAgreement{}
	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAgreementDBTypes, true, userAgreementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAgreementAllColumns, userAgreementPrimaryKeyColumns) {
		fields = userAgreementAllColumns
	} else {
		fields = strmangle.SetComplement(
			userAgreementAllColumns,
			userAgreementPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserAgreementSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserAgreementsUpsert(t *testing.T) {
	t.Parallel()

	if len(userAgreementAllColumns) == len(userAgreementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserAgreementUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserAgreement{}
	if err = randomize.Struct(seed, &o, userAgreementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAgreement: %s", err)
	}

	count, err := UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userAgreementDBTypes, false, userAgreementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAgreement struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAgreement: %s", err)
	}

	count, err = UserAgreements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
