// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTicketRoles(t *testing.T) {
	t.Parallel()

	query := TicketRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TicketRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketRoleExists(ctx, tx, o.TicketID)
	if err != nil {
		t.Errorf("Unable to check if TicketRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketRoleExists to return true, but got false.")
	}
}

func testTicketRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketRoleFound, err := FindTicketRole(ctx, tx, o.TicketID)
	if err != nil {
		t.Error(err)
	}

	if ticketRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TicketRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TicketRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketRoleOne := &TicketRole{}
	ticketRoleTwo := &TicketRole{}
	if err = randomize.Struct(seed, ticketRoleOne, ticketRoleDBTypes, false, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketRoleTwo, ticketRoleDBTypes, false, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketRoleOne := &TicketRole{}
	ticketRoleTwo := &TicketRole{}
	if err = randomize.Struct(seed, ticketRoleOne, ticketRoleDBTypes, false, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketRoleTwo, ticketRoleDBTypes, false, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func ticketRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
	*o = TicketRole{}
	return nil
}

func testTicketRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TicketRole{}
	o := &TicketRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketRole object: %s", err)
	}

	AddTicketRoleHook(boil.BeforeInsertHook, ticketRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketRoleBeforeInsertHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.AfterInsertHook, ticketRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketRoleAfterInsertHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.AfterSelectHook, ticketRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketRoleAfterSelectHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.BeforeUpdateHook, ticketRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketRoleBeforeUpdateHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.AfterUpdateHook, ticketRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketRoleAfterUpdateHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.BeforeDeleteHook, ticketRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketRoleBeforeDeleteHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.AfterDeleteHook, ticketRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketRoleAfterDeleteHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.BeforeUpsertHook, ticketRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketRoleBeforeUpsertHooks = []TicketRoleHook{}

	AddTicketRoleHook(boil.AfterUpsertHook, ticketRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketRoleAfterUpsertHooks = []TicketRoleHook{}
}

func testTicketRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ticketRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketRoleToOneTicketUsingTicket(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TicketRole
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketRoleDBTypes, false, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TicketID = foreign.TicketID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TicketID != foreign.TicketID {
		t.Errorf("want: %v, got %v", foreign.TicketID, check.TicketID)
	}

	ranAfterSelectHook := false
	AddTicketHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TicketRoleSlice{&local}
	if err = local.L.LoadTicket(ctx, tx, false, (*[]*TicketRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTicketRoleToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TicketRole
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketRoleDBTypes, false, strmangle.SetComplement(ticketRolePrimaryKeyColumns, ticketRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketRole != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TicketID != x.TicketID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		if exists, err := TicketRoleExists(ctx, tx, a.TicketID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTicketRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketRoleDBTypes = map[string]string{`TicketID`: `int`, `RoleName`: `varchar`, `ExpiryTerm`: `timestamp`}
	_                 = bytes.MinRead
)

func testTicketRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketRoleAllColumns) == len(ticketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketRoleAllColumns) == len(ticketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketRole{}
	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketRoleDBTypes, true, ticketRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketRoleAllColumns, ticketRolePrimaryKeyColumns) {
		fields = ticketRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			ticketRoleAllColumns,
			ticketRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketRoleAllColumns) == len(ticketRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTicketRoleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TicketRole{}
	if err = randomize.Struct(seed, &o, ticketRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketRole: %s", err)
	}

	count, err := TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketRoleDBTypes, false, ticketRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketRole: %s", err)
	}

	count, err = TicketRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
