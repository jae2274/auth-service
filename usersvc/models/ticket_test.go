// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTickets(t *testing.T) {
	t.Parallel()

	query := Tickets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tickets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketExists(ctx, tx, o.TicketID)
	if err != nil {
		t.Errorf("Unable to check if Ticket exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketExists to return true, but got false.")
	}
}

func testTicketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketFound, err := FindTicket(ctx, tx, o.TicketID)
	if err != nil {
		t.Error(err)
	}

	if ticketFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tickets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tickets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketOne := &Ticket{}
	ticketTwo := &Ticket{}
	if err = randomize.Struct(seed, ticketOne, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketTwo, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tickets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketOne := &Ticket{}
	ticketTwo := &Ticket{}
	if err = randomize.Struct(seed, ticketOne, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketTwo, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ticketOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func testTicketsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ticket{}
	o := &Ticket{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ticket object: %s", err)
	}

	AddTicketHook(boil.BeforeInsertHook, ticketBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketBeforeInsertHooks = []TicketHook{}

	AddTicketHook(boil.AfterInsertHook, ticketAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketAfterInsertHooks = []TicketHook{}

	AddTicketHook(boil.AfterSelectHook, ticketAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketAfterSelectHooks = []TicketHook{}

	AddTicketHook(boil.BeforeUpdateHook, ticketBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketBeforeUpdateHooks = []TicketHook{}

	AddTicketHook(boil.AfterUpdateHook, ticketAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketAfterUpdateHooks = []TicketHook{}

	AddTicketHook(boil.BeforeDeleteHook, ticketBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketBeforeDeleteHooks = []TicketHook{}

	AddTicketHook(boil.AfterDeleteHook, ticketAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketAfterDeleteHooks = []TicketHook{}

	AddTicketHook(boil.BeforeUpsertHook, ticketBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketBeforeUpsertHooks = []TicketHook{}

	AddTicketHook(boil.AfterUpsertHook, ticketAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketAfterUpsertHooks = []TicketHook{}
}

func testTicketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ticketColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketOneToOneTicketRoleUsingTicketRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign TicketRole
	var local Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, ticketRoleDBTypes, true, ticketRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.TicketID = local.TicketID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TicketRole().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.TicketID != foreign.TicketID {
		t.Errorf("want: %v, got %v", foreign.TicketID, check.TicketID)
	}

	ranAfterSelectHook := false
	AddTicketRoleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *TicketRole) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TicketSlice{&local}
	if err = local.L.LoadTicketRole(ctx, tx, false, (*[]*Ticket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TicketRole == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TicketRole = nil
	if err = local.L.LoadTicketRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TicketRole == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTicketOneToOneSetOpTicketRoleUsingTicketRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c TicketRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketRoleDBTypes, false, strmangle.SetComplement(ticketRolePrimaryKeyColumns, ticketRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketRoleDBTypes, false, strmangle.SetComplement(ticketRolePrimaryKeyColumns, ticketRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TicketRole{&b, &c} {
		err = a.SetTicketRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TicketRole != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Ticket != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.TicketID != x.TicketID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		if exists, err := TicketRoleExists(ctx, tx, x.TicketID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.TicketID != x.TicketID {
			t.Error("foreign key was wrong value", a.TicketID, x.TicketID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testTicketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTicketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tickets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketDBTypes = map[string]string{`TicketID`: `int`, `UUID`: `varchar`, `UsedBy`: `int`, `CreateDate`: `datetime`}
	_             = bytes.MinRead
)

func testTicketsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketAllColumns) == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketAllColumns) == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketAllColumns, ticketPrimaryKeyColumns) {
		fields = ticketAllColumns
	} else {
		fields = strmangle.SetComplement(
			ticketAllColumns,
			ticketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketsUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketAllColumns) == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTicketUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ticket{}
	if err = randomize.Struct(seed, &o, ticketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ticket: %s", err)
	}

	count, err := Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketDBTypes, false, ticketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ticket: %s", err)
	}

	count, err = Tickets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
